			
SERVER_ID="$OS_MACHINE"_"$OSEE_APP_SERVER_PORT"
if [ ! -d "$OSEE_APP_SERVER_HOME" ]; then 
  OSEE_APP_SERVER_HOME=`pwd`;
fi

cd "$OSEE_APP_SERVER_HOME"

if [ ! -d "$JAVA_HOME" ]; then 
  JAVA_HOME=`which java | awk '{print substr($1,0,length($1)-9)}'`;
fi

LOG="$OSEE_APP_SERVER_HOME/logs/osee_app_server_$SERVER_ID.log"
LOCK="$OSEE_APP_SERVER_HOME/locks/osee_app_server_$SERVER_ID.lock"

RETVAL=0

BOOTUP=color
RES_COL=3
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

echo_success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"  OK  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 0
}

echo_failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

success() {
  #if [ -z "${IN_INITLOG:-}" ]; then
  #   initlog $INITLOG_ARGS -n $0 -s "$1" -e 1
  #fi
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_success
  return 0
}

# Log that something failed
failure() {
  rc=$?
  #if [ -z "${IN_INITLOG:-}" ]; then
  #   initlog $INITLOG_ARGS -n $0 -s "$1" -e 2
  #fi
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_failure
  [ -x /usr/bin/rhgb-client ] && /usr/bin/rhgb-client --details=yes
  [ -w /var/gdm/.gdmfifo ] && echo "BOOTUP_ERRORS" > /var/gdm/.gdmfifo &
  return $rc
}

print_osee_app_server_home(){
   echo "OSEE App Server Home: [$OSEE_APP_SERVER_HOME]"
   echo ""
}

osee_app_server_shutdown() {
  return `server.pl shutdown $OS_MACHINE $OSGI_TELNET_PORT`;
}

test_app_server_alive() {
  isAlive=`server.pl isAlive $OS_MACHINE $OSGI_TELNET_PORT`;
}

pid_of_osee_app_server() {
    if [ "$OS_NAME" == "SunOS" ]; then
    	/usr/ucb/ps auxwww | grep java | grep org.osgi.service.http.port="$OSEE_APP_SERVER_PORT" | grep -v grep | awk '{print $2}';
    else 
    	ps auxwww | grep java | grep org.osgi.service.http.port="$OSEE_APP_SERVER_PORT" | grep -v grep | awk '{print $2}';
    fi
}

start() {
    [ -e "$LOG" ] && cnt=`wc -l "$LOG" | awk '{ print $1 }'` || cnt=1

    echo -n $"Starting OSEE App Server: "
    
    mkdir -p "$OSEE_APP_SERVER_HOME"/logs
    mkdir -p "$OSEE_APP_SERVER_HOME"/locks
    
    EXECUTION_CMD="nohup $JAVA_HOME/bin/java -Xms40m -Xmx$OSEE_SERVER_MAX_MEMORY -Dosee.db.connection.id=$OSEE_DATABASE_CONNECTION_ID -Dorg.osgi.service.http.port=$OSEE_APP_SERVER_PORT $OSEE_APP_SERVER_EXTRA_VMARGS -jar $EQUINOX_LAUNCHER -console $OSGI_TELNET_PORT -consoleLog $OSEE_APP_ARGS>> $LOG 2>>&1" 
    echo "EXEC: $EXECUTION_CMD"> "$LOG"
    `$EXECUTION_CMD` &
    
    pid_of_osee_app_server > /dev/null
    RETVAL=$?
    [ $RETVAL = 0 ] && success $"$STRING" || failure $"$STRING"
    echo

    [ $RETVAL = 0 ] && touch "$LOCK"
}

stop() {
    echo -n $"Stopping OSEE App Server: "
    
    pid=`pid_of_osee_app_server`

    if [ -n "$pid" ]; then
	wasShutdownSuccessful=osee_app_server_shutdown;
    fi

    [ -n "$pid" ] && kill $pid 
    RETVAL=$?
    cnt=10
    while [ $RETVAL = 0 -a $cnt -gt 0 ] &&
          { pid_of_osee_app_server > /dev/null ; } ; do
        sleep 1
        ((cnt--))
    done

    [ $RETVAL = 0 ] && rm -f "$LOCK"
    [ $RETVAL = 0 ] && success $"$STRING" || failure $"$STRING"
    echo
}

status() {
   pid=`pid_of_osee_app_server`
   if [ -n "$pid" ]; then
          test_app_server_alive

	  if [ "$isAlive" == "Alive" ]; then
    	  echo "OSEE App Server (pid $pid) is running..."
		else 
   	  echo "OSGI without OSEE (pid $pid) is running..."
   	fi
  		return 0
   fi
   
   if [ -f "$LOCK" ]; then
   	echo $"${base} dead but subsys locked"
      return 2
   fi
   
   echo "OSEE App Server is stopped"
   return 3
}

# See how we were called.
case "$1" in
  start)
    print_osee_app_server_home
    start
    ;;
  stop)
    print_osee_app_server_home
    stop
    ;;
  status)
    print_osee_app_server_home
    status
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart|status}"
    exit 1
esac


exit $RETVAL
