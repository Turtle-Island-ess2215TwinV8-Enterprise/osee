/*
* generated by Xtext
*/
grammar InternalOseeTypes;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.osee.framework.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.osee.framework.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.osee.framework.services.OseeTypesGrammarAccess;

}

@parser::members {
 
 	private OseeTypesGrammarAccess grammarAccess;
 	
    public InternalOseeTypesParser(TokenStream input, IAstFactory factory, OseeTypesGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/osee/framework/parser/antlr/internal/InternalOseeTypes.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "OseeTypeModel";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOseeTypeModel
entryRuleOseeTypeModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOseeTypeModelRule(), currentNode); }
	 iv_ruleOseeTypeModel=ruleOseeTypeModel 
	 { $current=$iv_ruleOseeTypeModel.current; } 
	 EOF 
;

// Rule OseeTypeModel
ruleOseeTypeModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
	    lv_imports_0=ruleImport 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "imports", lv_imports_0, "Import", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getArtifactTypesArtifactTypeParserRuleCall_1_0_0(), currentNode); 
	    }
	    lv_artifactTypes_1=ruleArtifactType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "artifactTypes", lv_artifactTypes_1, "ArtifactType", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getRelationTypesRelationTypeParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_relationTypes_2=ruleRelationType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "relationTypes", lv_relationTypes_2, "RelationType", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getAttributeTypesAttributeTypeParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_attributeTypes_3=ruleAttributeType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "attributeTypes", lv_attributeTypes_3, "AttributeType", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getEnumTypesOseeEnumTypeParserRuleCall_1_3_0(), currentNode); 
	    }
	    lv_enumTypes_4=ruleOseeEnumType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "enumTypes", lv_enumTypes_4, "OseeEnumType", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getEnumOverridesOseeEnumOverrideParserRuleCall_1_4_0(), currentNode); 
	    }
	    lv_enumOverrides_5=ruleOseeEnumOverride 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "enumOverrides", lv_enumOverrides_5, "OseeEnumOverride", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(	
	
	    lv_importURI_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "importURI", lv_importURI_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleNAME_REFERENCE
entryRuleNAME_REFERENCE returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNAME_REFERENCERule(), currentNode); } 
	 iv_ruleNAME_REFERENCE=ruleNAME_REFERENCE 
	 { $current=$iv_ruleNAME_REFERENCE.current.getText(); }  
	 EOF 
;

// Rule NAME_REFERENCE
ruleNAME_REFERENCE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getNAME_REFERENCEAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleQUALIFIED_NAME
entryRuleQUALIFIED_NAME returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQUALIFIED_NAMERule(), currentNode); } 
	 iv_ruleQUALIFIED_NAME=ruleQUALIFIED_NAME 
	 { $current=$iv_ruleQUALIFIED_NAME.current.getText(); }  
	 EOF 
;

// Rule QUALIFIED_NAME
ruleQUALIFIED_NAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQUALIFIED_NAMEAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQUALIFIED_NAMEAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getQUALIFIED_NAMEAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;







// Entry rule entryRuleOseeType
entryRuleOseeType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOseeTypeRule(), currentNode); }
	 iv_ruleOseeType=ruleOseeType 
	 { $current=$iv_ruleOseeType.current; } 
	 EOF 
;

// Rule OseeType
ruleOseeType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOseeTypeAccess().getArtifactTypeParserRuleCall_0(), currentNode); 
    }
    this_ArtifactType_0=ruleArtifactType
    { 
        $current = $this_ArtifactType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getOseeTypeAccess().getRelationTypeParserRuleCall_1(), currentNode); 
    }
    this_RelationType_1=ruleRelationType
    { 
        $current = $this_RelationType_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getOseeTypeAccess().getAttributeTypeParserRuleCall_2(), currentNode); 
    }
    this_AttributeType_2=ruleAttributeType
    { 
        $current = $this_AttributeType_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getOseeTypeAccess().getOseeEnumTypeParserRuleCall_3(), currentNode); 
    }
    this_OseeEnumType_3=ruleOseeEnumType
    { 
        $current = $this_OseeEnumType_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleArtifactType
entryRuleArtifactType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArtifactTypeRule(), currentNode); }
	 iv_ruleArtifactType=ruleArtifactType 
	 { $current=$iv_ruleArtifactType.current; } 
	 EOF 
;

// Rule ArtifactType
ruleArtifactType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_abstract_0='abstract' 
    {
        createLeafNode(grammarAccess.getArtifactTypeAccess().getAbstractAbstractKeyword_0_0(), "abstract"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "abstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'artifactType' 
    {
        createLeafNode(grammarAccess.getArtifactTypeAccess().getArtifactTypeKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArtifactTypeAccess().getNameNAME_REFERENCEParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_2=ruleNAME_REFERENCE 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "NAME_REFERENCE", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('extends' 
    {
        createLeafNode(grammarAccess.getArtifactTypeAccess().getExtendsKeyword_3_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArtifactTypeAccess().getSuperArtifactTypesArtifactTypeCrossReference_3_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
)(',' 
    {
        createLeafNode(grammarAccess.getArtifactTypeAccess().getCommaKeyword_3_2_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArtifactTypeAccess().getSuperArtifactTypesArtifactTypeCrossReference_3_2_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
))*)?'{' 
    {
        createLeafNode(grammarAccess.getArtifactTypeAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
'guid' 
    {
        createLeafNode(grammarAccess.getArtifactTypeAccess().getGuidKeyword_5(), null); 
    }
(	
	
	    lv_typeGuid_9=	RULE_STRING
	{
		createLeafNode(grammarAccess.getArtifactTypeAccess().getTypeGuidSTRINGTerminalRuleCall_6_0(), "typeGuid"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "typeGuid", lv_typeGuid_9, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArtifactTypeAccess().getValidAttributeTypesAttributeTypeRefParserRuleCall_7_0(), currentNode); 
	    }
	    lv_validAttributeTypes_10=ruleAttributeTypeRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "validAttributeTypes", lv_validAttributeTypes_10, "AttributeTypeRef", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getArtifactTypeAccess().getRightCurlyBracketKeyword_8(), null); 
    }
);





// Entry rule entryRuleAttributeTypeRef
entryRuleAttributeTypeRef returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAttributeTypeRefRule(), currentNode); }
	 iv_ruleAttributeTypeRef=ruleAttributeTypeRef 
	 { $current=$iv_ruleAttributeTypeRef.current; } 
	 EOF 
;

// Rule AttributeTypeRef
ruleAttributeTypeRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('attribute' 
    {
        createLeafNode(grammarAccess.getAttributeTypeRefAccess().getAttributeKeyword_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeTypeRefAccess().getValidAttributeTypeAttributeTypeCrossReference_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
)('branchGuid' 
    {
        createLeafNode(grammarAccess.getAttributeTypeRefAccess().getBranchGuidKeyword_2_0(), null); 
    }
(	
	
	    lv_branchGuid_3=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeTypeRefAccess().getBranchGuidSTRINGTerminalRuleCall_2_1_0(), "branchGuid"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "branchGuid", lv_branchGuid_3, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?);





// Entry rule entryRuleAttributeType
entryRuleAttributeType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAttributeTypeRule(), currentNode); }
	 iv_ruleAttributeType=ruleAttributeType 
	 { $current=$iv_ruleAttributeType.current; } 
	 EOF 
;

// Rule AttributeType
ruleAttributeType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('attributeType' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getAttributeTypeKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
	    lv_name_1=ruleNAME_REFERENCE 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "NAME_REFERENCE", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('extends' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getExtendsKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeTypeAccess().getBaseAttributeTypeAttributeBaseTypeParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_baseAttributeType_3=ruleAttributeBaseType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "baseAttributeType", lv_baseAttributeType_3, "AttributeBaseType", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))('overrides' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getOverridesKeyword_3_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeTypeAccess().getOverrideAttributeTypeCrossReference_3_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
))?'{' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
'guid' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getGuidKeyword_5(), null); 
    }
(	
	
	    lv_typeGuid_8=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeTypeAccess().getTypeGuidSTRINGTerminalRuleCall_6_0(), "typeGuid"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "typeGuid", lv_typeGuid_8, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'dataProvider' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDataProviderKeyword_7(), null); 
    }
(	
	
	    lv_dataProvider_10=('DefaultAttributeDataProvider' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDataProviderDefaultAttributeDataProviderKeyword_8_0_0(), "dataProvider"); 
    }


    |'UriAttributeDataProvider' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDataProviderUriAttributeDataProviderKeyword_8_0_1(), "dataProvider"); 
    }


    |'MappedAttributeDataProvider' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDataProviderMappedAttributeDataProviderKeyword_8_0_2(), "dataProvider"); 
    }


    |	{ 
        currentNode=createCompositeNode(grammarAccess.getAttributeTypeAccess().getDataProviderQUALIFIED_NAMEParserRuleCall_8_0_3(), currentNode); 
    }
	ruleQUALIFIED_NAME	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dataProvider", /* lv_dataProvider_10 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'min' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getMinKeyword_9(), null); 
    }
(	
	
	    lv_min_12=	RULE_WHOLE_NUM_STR
	{
		createLeafNode(grammarAccess.getAttributeTypeAccess().getMinWHOLE_NUM_STRTerminalRuleCall_10_0(), "min"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "min", lv_min_12, "WHOLE_NUM_STR", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'max' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getMaxKeyword_11(), null); 
    }
(	
	
	    lv_max_14=(	RULE_WHOLE_NUM_STR
	{
		createLeafNode(grammarAccess.getAttributeTypeAccess().getMaxWHOLE_NUM_STRTerminalRuleCall_12_0_0(), "max"); 
	}

    |'unlimited' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getMaxUnlimitedKeyword_12_0_1(), "max"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "max", /* lv_max_14 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('taggerId' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getTaggerIdKeyword_13_0(), null); 
    }
(	
	
	    lv_taggerId_16=('DefaultAttributeTaggerProvider' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getTaggerIdDefaultAttributeTaggerProviderKeyword_13_1_0_0(), "taggerId"); 
    }


    |	{ 
        currentNode=createCompositeNode(grammarAccess.getAttributeTypeAccess().getTaggerIdQUALIFIED_NAMEParserRuleCall_13_1_0_1(), currentNode); 
    }
	ruleQUALIFIED_NAME	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "taggerId", /* lv_taggerId_16 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('enumType' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getEnumTypeKeyword_14_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeTypeAccess().getEnumTypeOseeEnumTypeCrossReference_14_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
))?('description' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDescriptionKeyword_15_0(), null); 
    }
(	
	
	    lv_description_20=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeTypeAccess().getDescriptionSTRINGTerminalRuleCall_15_1_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_20, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('defaultValue' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getDefaultValueKeyword_16_0(), null); 
    }
(	
	
	    lv_defaultValue_22=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeTypeAccess().getDefaultValueSTRINGTerminalRuleCall_16_1_0(), "defaultValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "defaultValue", lv_defaultValue_22, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?('fileExtension' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getFileExtensionKeyword_17_0(), null); 
    }
(	
	
	    lv_fileExtension_24=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeTypeAccess().getFileExtensionSTRINGTerminalRuleCall_17_1_0(), "fileExtension"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "fileExtension", lv_fileExtension_24, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))?'}' 
    {
        createLeafNode(grammarAccess.getAttributeTypeAccess().getRightCurlyBracketKeyword_18(), null); 
    }
);





// Entry rule entryRuleAttributeBaseType
entryRuleAttributeBaseType returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAttributeBaseTypeRule(), currentNode); } 
	 iv_ruleAttributeBaseType=ruleAttributeBaseType 
	 { $current=$iv_ruleAttributeBaseType.current.getText(); }  
	 EOF 
;

// Rule AttributeBaseType
ruleAttributeBaseType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='BooleanAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getBooleanAttributeKeyword_0(), null); 
    }

    |
	kw='CompressedContentAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getCompressedContentAttributeKeyword_1(), null); 
    }

    |
	kw='DateAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getDateAttributeKeyword_2(), null); 
    }

    |
	kw='EnumeratedAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getEnumeratedAttributeKeyword_3(), null); 
    }

    |
	kw='FloatingPointAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getFloatingPointAttributeKeyword_4(), null); 
    }

    |
	kw='IntegerAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getIntegerAttributeKeyword_5(), null); 
    }

    |
	kw='JavaObjectAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getJavaObjectAttributeKeyword_6(), null); 
    }

    |
	kw='StringAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getStringAttributeKeyword_7(), null); 
    }

    |
	kw='WordAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getWordAttributeKeyword_8(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeBaseTypeAccess().getQUALIFIED_NAMEParserRuleCall_9(), currentNode); 
    }
    this_QUALIFIED_NAME_9=ruleQUALIFIED_NAME    {
		$current.merge(this_QUALIFIED_NAME_9);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleOseeEnumType
entryRuleOseeEnumType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOseeEnumTypeRule(), currentNode); }
	 iv_ruleOseeEnumType=ruleOseeEnumType 
	 { $current=$iv_ruleOseeEnumType.current; } 
	 EOF 
;

// Rule OseeEnumType
ruleOseeEnumType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('oseeEnumType' 
    {
        createLeafNode(grammarAccess.getOseeEnumTypeAccess().getOseeEnumTypeKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeEnumTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
	    lv_name_1=ruleNAME_REFERENCE 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeEnumTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "NAME_REFERENCE", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'{' 
    {
        createLeafNode(grammarAccess.getOseeEnumTypeAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
'guid' 
    {
        createLeafNode(grammarAccess.getOseeEnumTypeAccess().getGuidKeyword_3(), null); 
    }
(	
	
	    lv_typeGuid_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getOseeEnumTypeAccess().getTypeGuidSTRINGTerminalRuleCall_4_0(), "typeGuid"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeEnumTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "typeGuid", lv_typeGuid_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeEnumTypeAccess().getEnumEntriesOseeEnumEntryParserRuleCall_5_0(), currentNode); 
	    }
	    lv_enumEntries_5=ruleOseeEnumEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeEnumTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "enumEntries", lv_enumEntries_5, "OseeEnumEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getOseeEnumTypeAccess().getRightCurlyBracketKeyword_6(), null); 
    }
);





// Entry rule entryRuleOseeEnumEntry
entryRuleOseeEnumEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOseeEnumEntryRule(), currentNode); }
	 iv_ruleOseeEnumEntry=ruleOseeEnumEntry 
	 { $current=$iv_ruleOseeEnumEntry.current; } 
	 EOF 
;

// Rule OseeEnumEntry
ruleOseeEnumEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('entry' 
    {
        createLeafNode(grammarAccess.getOseeEnumEntryAccess().getEntryKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeEnumEntryAccess().getNameNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
	    lv_name_1=ruleNAME_REFERENCE 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeEnumEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "NAME_REFERENCE", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_ordinal_2=	RULE_WHOLE_NUM_STR
	{
		createLeafNode(grammarAccess.getOseeEnumEntryAccess().getOrdinalWHOLE_NUM_STRTerminalRuleCall_2_0(), "ordinal"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeEnumEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ordinal", lv_ordinal_2, "WHOLE_NUM_STR", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?);





// Entry rule entryRuleOseeEnumOverride
entryRuleOseeEnumOverride returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOseeEnumOverrideRule(), currentNode); }
	 iv_ruleOseeEnumOverride=ruleOseeEnumOverride 
	 { $current=$iv_ruleOseeEnumOverride.current; } 
	 EOF 
;

// Rule OseeEnumOverride
ruleOseeEnumOverride returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('overrides enum' 
    {
        createLeafNode(grammarAccess.getOseeEnumOverrideAccess().getOverridesEnumKeyword_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeEnumOverrideRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOseeEnumOverrideAccess().getOverridenEnumTypeOseeEnumTypeCrossReference_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
)'{' 
    {
        createLeafNode(grammarAccess.getOseeEnumOverrideAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	
	
	    lv_inheritAll_3='inheritAll' 
    {
        createLeafNode(grammarAccess.getOseeEnumOverrideAccess().getInheritAllInheritAllKeyword_3_0(), "inheritAll"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeEnumOverrideRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "inheritAll", true, "inheritAll", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOseeEnumOverrideAccess().getOverrideOptionsOverrideOptionParserRuleCall_4_0(), currentNode); 
	    }
	    lv_overrideOptions_4=ruleOverrideOption 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeEnumOverrideRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "overrideOptions", lv_overrideOptions_4, "OverrideOption", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getOseeEnumOverrideAccess().getRightCurlyBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleOverrideOption
entryRuleOverrideOption returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOverrideOptionRule(), currentNode); }
	 iv_ruleOverrideOption=ruleOverrideOption 
	 { $current=$iv_ruleOverrideOption.current; } 
	 EOF 
;

// Rule OverrideOption
ruleOverrideOption returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOverrideOptionAccess().getAddEnumParserRuleCall_0(), currentNode); 
    }
    this_AddEnum_0=ruleAddEnum
    { 
        $current = $this_AddEnum_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getOverrideOptionAccess().getRemoveEnumParserRuleCall_1(), currentNode); 
    }
    this_RemoveEnum_1=ruleRemoveEnum
    { 
        $current = $this_RemoveEnum_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleAddEnum
entryRuleAddEnum returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAddEnumRule(), currentNode); }
	 iv_ruleAddEnum=ruleAddEnum 
	 { $current=$iv_ruleAddEnum.current; } 
	 EOF 
;

// Rule AddEnum
ruleAddEnum returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('add' 
    {
        createLeafNode(grammarAccess.getAddEnumAccess().getAddKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAddEnumAccess().getEnumEntryNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
	    lv_enumEntry_1=ruleNAME_REFERENCE 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "enumEntry", lv_enumEntry_1, "NAME_REFERENCE", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_ordinal_2=	RULE_WHOLE_NUM_STR
	{
		createLeafNode(grammarAccess.getAddEnumAccess().getOrdinalWHOLE_NUM_STRTerminalRuleCall_2_0(), "ordinal"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ordinal", lv_ordinal_2, "WHOLE_NUM_STR", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?);





// Entry rule entryRuleRemoveEnum
entryRuleRemoveEnum returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRemoveEnumRule(), currentNode); }
	 iv_ruleRemoveEnum=ruleRemoveEnum 
	 { $current=$iv_ruleRemoveEnum.current; } 
	 EOF 
;

// Rule RemoveEnum
ruleRemoveEnum returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('remove' 
    {
        createLeafNode(grammarAccess.getRemoveEnumAccess().getRemoveKeyword_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRemoveEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRemoveEnumAccess().getEnumEntryOseeEnumEntryCrossReference_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleRelationType
entryRuleRelationType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationTypeRule(), currentNode); }
	 iv_ruleRelationType=ruleRelationType 
	 { $current=$iv_ruleRelationType.current; } 
	 EOF 
;

// Rule RelationType
ruleRelationType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('relationType' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getRelationTypeKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
	    lv_name_1=ruleNAME_REFERENCE 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "NAME_REFERENCE", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'{' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
'guid' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getGuidKeyword_3(), null); 
    }
(	
	
	    lv_typeGuid_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getRelationTypeAccess().getTypeGuidSTRINGTerminalRuleCall_4_0(), "typeGuid"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "typeGuid", lv_typeGuid_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'sideAName' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getSideANameKeyword_5(), null); 
    }
(	
	
	    lv_sideAName_6=	RULE_STRING
	{
		createLeafNode(grammarAccess.getRelationTypeAccess().getSideANameSTRINGTerminalRuleCall_6_0(), "sideAName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sideAName", lv_sideAName_6, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'sideAArtifactType' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getSideAArtifactTypeKeyword_7(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationTypeAccess().getSideAArtifactTypeArtifactTypeCrossReference_8_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
)'sideBName' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getSideBNameKeyword_9(), null); 
    }
(	
	
	    lv_sideBName_10=	RULE_STRING
	{
		createLeafNode(grammarAccess.getRelationTypeAccess().getSideBNameSTRINGTerminalRuleCall_10_0(), "sideBName"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sideBName", lv_sideBName_10, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'sideBArtifactType' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getSideBArtifactTypeKeyword_11(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationTypeAccess().getSideBArtifactTypeArtifactTypeCrossReference_12_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

		// TODO assign feature to currentNode
	
)'defaultOrderType' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getDefaultOrderTypeKeyword_13(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationTypeAccess().getDefaultOrderTypeRelationOrderTypeParserRuleCall_14_0(), currentNode); 
	    }
	    lv_defaultOrderType_14=ruleRelationOrderType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "defaultOrderType", lv_defaultOrderType_14, "RelationOrderType", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'multiplicity' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getMultiplicityKeyword_15(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationTypeAccess().getMultiplicityRelationMultiplicityEnumEnumRuleCall_16_0(), currentNode); 
	    }
	    lv_multiplicity_16=ruleRelationMultiplicityEnum 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_16, "RelationMultiplicityEnum", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getRelationTypeAccess().getRightCurlyBracketKeyword_17(), null); 
    }
);





// Entry rule entryRuleRelationOrderType
entryRuleRelationOrderType returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationOrderTypeRule(), currentNode); } 
	 iv_ruleRelationOrderType=ruleRelationOrderType 
	 { $current=$iv_ruleRelationOrderType.current.getText(); }  
	 EOF 
;

// Rule RelationOrderType
ruleRelationOrderType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='Lexicographical_Ascending' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationOrderTypeAccess().getLexicographical_AscendingKeyword_0(), null); 
    }

    |
	kw='Lexicographical_Descending' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationOrderTypeAccess().getLexicographical_DescendingKeyword_1(), null); 
    }

    |
	kw='Unordered' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationOrderTypeAccess().getUnorderedKeyword_2(), null); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getRelationOrderTypeAccess().getIDTerminalRuleCall_3(), null); 
    }
)
    ;





// Rule RelationMultiplicityEnum
ruleRelationMultiplicityEnum returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'ONE_TO_ONE' 
	{
        $current = grammarAccess.getRelationMultiplicityEnumAccess().getONE_TO_ONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationMultiplicityEnumAccess().getONE_TO_ONEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'ONE_TO_MANY' 
	{
        $current = grammarAccess.getRelationMultiplicityEnumAccess().getONE_TO_MANYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationMultiplicityEnumAccess().getONE_TO_MANYEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'MANY_TO_ONE' 
	{
        $current = grammarAccess.getRelationMultiplicityEnumAccess().getMANY_TO_ONEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationMultiplicityEnumAccess().getMANY_TO_ONEEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'MANY_TO_MANY' 
	{
        $current = grammarAccess.getRelationMultiplicityEnumAccess().getMANY_TO_MANYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationMultiplicityEnumAccess().getMANY_TO_MANYEnumLiteralDeclaration_3(), null); 
    }
));



RULE_WHOLE_NUM_STR : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


