<project default="run" name="org.eclipse.osee.base.releng/createEclipseTarget.xml">
	<!--
		given a list of platforms & dependencies, assemble one or more all in ones
		by copying the eclipse zip/tar.gz, then adding deps + SDK into it
	-->

	<!-- Required Properties
	${writableBuildRoot}
	${updateZip}
	${projectName}
	
	targetPrefix= if not set will be defaulted to projectName-platform
	targetPlatforms=linux-gtk,win32,solaris-gtk
	
	featureIDsToInstall,
	pluginIDsToInstall,
	IUsToInstall
	relengCommonBuilderDir= org.eclipse.dash.common.releng,
	relengBaseBuilderDir= org.eclipse.releng.basebuilder
	-->

	<target name="init">
		<if>
			<not>
				<isset property="targetPrefix" />
			</not>
			<then>
				<property name="targetPrefix" value="${projectName}" />
			</then>
		</if>
		<if>
			<not>
				<isset property="targetPlatforms" />
			</not>
			<then>
				<property name="targetPlatforms" value="linux-gtk,win32,solaris-gtk,macosx-carbon" />
			</then>
		</if>
		<if>
			<not>
				<isset property="incubation" />
			</not>
			<then>
				<property name="incubation" value="" />
			</then>
		</if>
		<if>
			<not>
				<isset property="eclipseBaseNameId" />
			</not>
			<then>
				<property name="eclipseBaseNameId" value="SDK" />
			</then>
		</if>
	</target>

	<target name="build" description="create one or more platform target archives">
		<echo message="Generating ${buildType} build type target(s)..." />
		<var name="platformBuildDir" value="${buildDirectory}" />
		
		<echo message="PlatformBuildDir:[${platformBuildDir}]" />
		
		<!-- for all the platform suffixes to build... -->
		<for param="platformSuffix" list="${targetPlatforms}">
			<sequential>
				<if>
					<equals arg1="@{platformSuffix}" arg2="win32" />
					<then>
						<var name="platformArchiveSuffix" value=".zip" />
					</then>
					<elseif>
						<equals arg1="@{platformSuffix}" arg2="solaris-gtk" />
						<then>
							<var name="eclipseSuffix" value=".zip" />
						</then>
					</elseif>
					<else>
						<var name="platformArchiveSuffix" value=".tar" />
					</else>
				</if>
				<if>
					<equals arg1="@{platformSuffix}" arg2="win32" />
					<then>
						<var name="eclipseSuffix" value=".zip" />
					</then>
					<elseif>
						<equals arg1="@{platformSuffix}" arg2="solaris-gtk" />
						<then>
							<var name="eclipseSuffix" value=".zip" />
						</then>
					</elseif>
					<else>
						<var name="eclipseSuffix" value=".tar.gz" />
					</else>
				</if>
				<var name="destArchiveName" value="${targetPrefix}-@{platformSuffix}${incubation}${platformArchiveSuffix}" />
				<var name="destArchiveNamePath" value="${buildDirectory}/../${destArchiveName}" />

				<!-- get the Eclipse bundle if not already downloaded: only need linux-gtk to build, but need others to package up all-in-ones -->
				<!-- <echo message="orig eclipse.base.file = ${eclipse.base.file}" /> -->
				<propertyregex property="thisEclipseFile" input="${eclipse.base.file}" regexp="(eclipse-)(SDK-)(.+)(-linux-gtk\.tar\.gz)" replace="\1${eclipseBaseNameId}-\3-@{platformSuffix}${eclipseSuffix}" casesensitive="false" />
				<!-- <echo message="this eclipse.base.file = ${thisEclipseFile}" /> -->
				<if>
					<not>
						<available file="${downloadsDir}/${thisEclipseFile}" type="file" />
					</not>
					<then>
						<!-- <echo message="orig eclipse.base.url = ${eclipse.base.url}" /> -->
						<propertyregex property="thisEclipseURL" input="${eclipse.base.url}" regexp="(.+eclipse-)(SDK-)(.+)(-linux-gtk\.tar\.gz)" replace="\1${eclipseBaseNameId}-\3-@{platformSuffix}${eclipseSuffix}" casesensitive="false" />
						<!-- <echo message="this eclipse.base.url = ${thisEclipseURL}" /> -->
						<get src="${thisEclipseURL}" dest="${downloadsDir}/${thisEclipseFile}" usetimestamp="true" />
						<touch file="${downloadsDir}/${thisEclipseFile}" />
					</then>
				</if>


				<mkdir dir="${platformBuildDir}" />
				<if>
					<equals arg1="@{platformSuffix}" arg2="win32" />
					<then>
						<unzip src="${downloadsDir}/${thisEclipseFile}" dest="${platformBuildDir}" />
					</then>
					<elseif>
						<equals arg1="@{platformSuffix}" arg2="solaris-gtk" />
						<then>
							<unzip src="${downloadsDir}/${thisEclipseFile}" dest="${platformBuildDir}" />
						</then>
					</elseif>
					<else>
						<gunzip src="${downloadsDir}/${thisEclipseFile}" dest="${platformBuildDir}/tarFile.tar" />
						<untar src="${platformBuildDir}/tarFile.tar" dest="${platformBuildDir}" />
						<delete file="${platformBuildDir}/tarFile.tar" />
					</else>
				</if>

				<var name="install" value="${platformBuildDir}" />
				<var name="eclipse-home" value="${install}/eclipse" />
				<var name="dropins-home" value="${install}/eclipse/dropins" />
				
				<antcall target="installDependencies" inheritAll="true" />

				<var name="suffix" value="@{platformSuffix}" />
				<antcall target="createArchive" inheritAll="true" />

				<var name="thisEclipseFile" unset="true" />
				<var name="thisEclipseURL" unset="true" />
			</sequential>
		</for>
		<delete dir="${platformBuildDir}" includeemptydirs="true" quiet="true" failonerror="false" excludes="**/label.properties"/>
	</target>

	<target name="createArchive">
		<!-- <echo message="Create ${destArchiveName} from ${thisEclipseFile} ..." /> -->
		<if>
			<equals arg1="${suffix}" arg2="win32" />
			<then>
				<zip destfile="${destArchiveNamePath}" update="true">
					<fileset dir="${platformBuildDir}" />
				</zip>
			</then>
			<elseif>
				<equals arg1="@{suffix}" arg2="solaris-gtk" />
				<then>
					<zip destfile="${destArchiveNamePath}" update="true">
						<fileset dir="${platformBuildDir}" />
					</zip>
				</then>
			</elseif>
			<else>
				<tar destfile="${destArchiveNamePath}" basedir="${platformBuildDir}" />
				<gzip src="${destArchiveNamePath}" destfile="${destArchiveNamePath}.gz" />
				<delete file="${destArchiveNamePath}" />
			</else>
		</if>
	</target>


	<target name="installDependencies">
		<for param="whatToInstall" list="featureIDsToInstall,pluginIDsToInstall,IUsToInstall" delimiter="," keepgoing="true">
			<sequential>
				<if>
					<and>
						<isset property="@{whatToInstall}" />
						<not>
							<equals arg1="${@{whatToInstall}}" arg2="" />
						</not>
					</and>
					<then>
						<!-- shortcut for installing features -->
						<if>
							<equals arg1="@{whatToInstall}" arg2="featureIDsToInstall" />
							<then>
								<var name="IUsuffix" value=".feature.group" />
								<var name="p2.director.installType" value="feature" />
							</then>
							<else>
								<var name="IUsuffix" value="" />
								<var name="p2.director.installType" value="IU" />
							</else>
						</if>
						<for param="whatID" list="${@{whatToInstall}}" delimiter=", " keepgoing="true">
							<sequential>
								<echo>Install @{whatID} to ${buildDirectory}</echo>
								<if>
									<available file="${buildDirectory}/p2/org.eclipse.equinox.p2.engine/profileRegistry/SDKProfile.profile" type="dir" />
									<then>
										<var name="repositoryURLs.cleaned" value="file:${buildDirectory}/p2/org.eclipse.equinox.p2.engine/profileRegistry/SDKProfile.profile,${repositoryURLs},${repositoryURLs}" />
									</then>
									<else>
										<var name="repositoryURLs.cleaned" value="${repositoryURLs}" />
									</else>
								</if>
								<if>
									<contains string="@{whatID}" substring="+" />
									<then>
										<propertyregex property="whatIDListCmd" input="@{whatID}" defaultvalue="@{whatID}" regexp="\+" replace="${IUsuffix} -installIU " override="true" />
										<!-- install multiple IUs at the same time with Eclipse 3.5 -->
										<ant target="run.director" antfile="${helper}">
											<property name="p2.director.installType" value="${p2.director.installType}" />
											<property name="p2.director.installIU" value="${whatIDListCmd}" />
											<property name="p2.director.input.repo" value="${repositoryURLs.cleaned}" />
											<property name="p2.director.destination" value="${eclipse-home}" />
											<property name="p2.director.application" value="org.eclipse.equinox.p2.director" />
										</ant>
										<var name="whatIDListCmd" unset="true" />
									</then>
									<else>
										<!-- install one IU at a time with Eclipse 3.4 or 3.5 -->
										<ant target="run.director" antfile="${helper}">
											<property name="p2.director.installType" value="${p2.director.installType}" />
											<property name="p2.director.installIU" value="@{whatID}" />
											<property name="p2.director.input.repo" value="${repositoryURLs.cleaned}" />
											<property name="p2.director.destination" value="${eclipse-home}" />
										</ant>
									</else>
								</if>
							</sequential>
						</for>
						<var name="IUsuffix" unset="true" />
						<var name="p2.director.installType" unset="true" />
					</then>
				</if>
			</sequential>
		</for>

		<property name="getDependenciesHelper.xml" value="${relengCommonScriptsDir}/getDependenciesHelper.xml" />
		<for param="dependencyfile" list="${required.dependency.files}" delimiter=", ">
			<sequential>
				<if>
					<not>
						<contains string="@{dependencyfile}" substring="eclipse-SDK-" casesensitive="false" />
					</not>
					<then>
						<if>
							<or>
								<contains string="@{dependencyfile}" substring="master" casesensitive="false" />
								<contains string="@{dependencyfile}" substring="update" casesensitive="false" />
							</or>
							<then>
								<!-- unpack update site zip -->
								<ant antfile="${getDependenciesHelper.xml}" target="unpackUpdateSite">
									<property name="file" value="@{dependencyfile}" />
									<property name="unpackDest" value="${dropins-home}/@{dependencyfile}_/eclipse/" />
								</ant>
							</then>
							<else>
								<!-- unpack normal zip -->
								<ant antfile="${getDependenciesHelper.xml}" target="unpackBundle">
									<property name="file" value="@{dependencyfile}" />
									<property name="unpackDest" value="${dropins-home}/@{dependencyfile}_/" />
								</ant>
							</else>
						</if>
					</then>
				</if>
			</sequential>
		</for>
	</target>


	<target name="run" depends="init,build">
	</target>
</project>