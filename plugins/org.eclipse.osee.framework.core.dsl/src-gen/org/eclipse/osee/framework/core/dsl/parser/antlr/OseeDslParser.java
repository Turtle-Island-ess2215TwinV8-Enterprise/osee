/*
 * generated by Xtext
 */
package org.eclipse.osee.framework.core.dsl.parser.antlr;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.osee.framework.core.dsl.services.OseeDslGrammarAccess;
import org.eclipse.xtext.parser.IParseResult;
import org.eclipse.xtext.parser.ParseException;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import com.google.inject.Inject;

public class OseeDslParser extends org.eclipse.xtext.parser.antlr.AbstractAntlrParser {

   @Inject
   private OseeDslGrammarAccess grammarAccess;

   @Override
   protected IParseResult parse(String ruleName, CharStream in) {
      TokenSource tokenSource = createLexer(in);
      XtextTokenStream tokenStream = createTokenStream(tokenSource);
      tokenStream.setInitialHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
      org.eclipse.osee.framework.core.dsl.parser.antlr.internal.InternalOseeDslParser parser =
         createParser(tokenStream);
      parser.setTokenTypeMap(getTokenDefProvider().getTokenDefMap());
      parser.setSyntaxErrorProvider(getSyntaxErrorProvider());
      parser.setUnorderedGroupHelper(getUnorderedGroupHelper().get());
      try {
         if (ruleName != null) {
            return parser.parse(ruleName);
         }
         return parser.parse();
      } catch (Exception re) {
         throw new ParseException(re.getMessage(), re);
      }
   }

   protected org.eclipse.osee.framework.core.dsl.parser.antlr.internal.InternalOseeDslParser createParser(XtextTokenStream stream) {
      return new org.eclipse.osee.framework.core.dsl.parser.antlr.internal.InternalOseeDslParser(stream,
         getElementFactory(), getGrammarAccess());
   }

   @Override
   protected String getDefaultRuleName() {
      return "OseeDsl";
   }

   public OseeDslGrammarAccess getGrammarAccess() {
      return this.grammarAccess;
   }

   public void setGrammarAccess(OseeDslGrammarAccess grammarAccess) {
      this.grammarAccess = grammarAccess;
   }

}
