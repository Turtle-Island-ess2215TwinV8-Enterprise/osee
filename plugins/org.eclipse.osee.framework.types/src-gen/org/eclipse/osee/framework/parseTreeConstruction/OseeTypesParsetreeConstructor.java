/*
* generated by Xtext
*/
package org.eclipse.osee.framework.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.osee.framework.services.OseeTypesGrammarAccess;

import com.google.inject.Inject;

public class OseeTypesParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private OseeTypesGrammarAccess grammarAccess;
	
	@Override	
	public OseeTypesGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeTypeModel_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new OseeElement_Alternatives(this, this, 2, inst);
			case 3: return new OseeType_Alternatives(this, this, 3, inst);
			case 4: return new XArtifactType_Group(this, this, 4, inst);
			case 5: return new XAttributeTypeRef_Group(this, this, 5, inst);
			case 6: return new XAttributeType_Group(this, this, 6, inst);
			case 7: return new XOseeEnumType_Group(this, this, 7, inst);
			case 8: return new XOseeEnumEntry_Group(this, this, 8, inst);
			case 9: return new XOseeEnumOverride_Group(this, this, 9, inst);
			case 10: return new OverrideOption_Alternatives(this, this, 10, inst);
			case 11: return new AddEnum_Group(this, this, 11, inst);
			case 12: return new RemoveEnum_Group(this, this, 12, inst);
			case 13: return new XRelationType_Group(this, this, 13, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule OseeTypeModel ****************
 *
 * OseeTypeModel:
 *   imports+=Import* (artifactTypes+=XArtifactType|relationTypes+=XRelationType|
 *   attributeTypes+=XAttributeType|enumTypes+=XOseeEnumType|enumOverrides+=
 *   XOseeEnumOverride)*;
 *
 **/

// imports+=Import* (artifactTypes+=XArtifactType|relationTypes+=XRelationType|
// attributeTypes+=XAttributeType|enumTypes+=XOseeEnumType|enumOverrides+=
// XOseeEnumOverride)*
protected class OseeTypeModel_Group extends GroupToken {
	
	public OseeTypeModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeTypeModel_Alternatives_1(parent, this, 0, inst);
			case 1: return new OseeTypeModel_ImportsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOseeTypeModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class OseeTypeModel_ImportsAssignment_0 extends AssignmentToken  {
	
	public OseeTypeModel_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getImportsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeTypeModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeTypeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// (artifactTypes+=XArtifactType|relationTypes+=XRelationType|attributeTypes+=
// XAttributeType|enumTypes+=XOseeEnumType|enumOverrides+=XOseeEnumOverride)*
protected class OseeTypeModel_Alternatives_1 extends AlternativesToken {

	public OseeTypeModel_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeTypeModel_ArtifactTypesAssignment_1_0(parent, this, 0, inst);
			case 1: return new OseeTypeModel_RelationTypesAssignment_1_1(parent, this, 1, inst);
			case 2: return new OseeTypeModel_AttributeTypesAssignment_1_2(parent, this, 2, inst);
			case 3: return new OseeTypeModel_EnumTypesAssignment_1_3(parent, this, 3, inst);
			case 4: return new OseeTypeModel_EnumOverridesAssignment_1_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// artifactTypes+=XArtifactType
protected class OseeTypeModel_ArtifactTypesAssignment_1_0 extends AssignmentToken  {
	
	public OseeTypeModel_ArtifactTypesAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getArtifactTypesAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("artifactTypes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("artifactTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXArtifactTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeTypeModelAccess().getArtifactTypesXArtifactTypeParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeTypeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new OseeTypeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// relationTypes+=XRelationType
protected class OseeTypeModel_RelationTypesAssignment_1_1 extends AssignmentToken  {
	
	public OseeTypeModel_RelationTypesAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getRelationTypesAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("relationTypes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("relationTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXRelationTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeTypeModelAccess().getRelationTypesXRelationTypeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeTypeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new OseeTypeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// attributeTypes+=XAttributeType
protected class OseeTypeModel_AttributeTypesAssignment_1_2 extends AssignmentToken  {
	
	public OseeTypeModel_AttributeTypesAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getAttributeTypesAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributeTypes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributeTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXAttributeTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeTypeModelAccess().getAttributeTypesXAttributeTypeParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeTypeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new OseeTypeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// enumTypes+=XOseeEnumType
protected class OseeTypeModel_EnumTypesAssignment_1_3 extends AssignmentToken  {
	
	public OseeTypeModel_EnumTypesAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getEnumTypesAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumTypes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXOseeEnumTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeTypeModelAccess().getEnumTypesXOseeEnumTypeParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeTypeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new OseeTypeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// enumOverrides+=XOseeEnumOverride
protected class OseeTypeModel_EnumOverridesAssignment_1_4 extends AssignmentToken  {
	
	public OseeTypeModel_EnumOverridesAssignment_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOseeTypeModelAccess().getEnumOverridesAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumOverride_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumOverrides",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumOverrides");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXOseeEnumOverrideRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOseeTypeModelAccess().getEnumOverridesXOseeEnumOverrideParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OseeTypeModel_Alternatives_1(parent, next, actIndex, consumed);
			case 1: return new OseeTypeModel_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}



/************ end Rule OseeTypeModel ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importURI=STRING;
 *
 **/

// "import" importURI=STRING
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportURIAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importURI=STRING
protected class Import_ImportURIAssignment_1 extends AssignmentToken  {
	
	public Import_ImportURIAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportURIAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importURI",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importURI");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/




/************ begin Rule OseeElement ****************
 *
 * OseeElement:
 *   XOseeEnumOverride|OseeType;
 *
 **/

// XOseeEnumOverride|OseeType
protected class OseeElement_Alternatives extends AlternativesToken {

	public OseeElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOseeElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeElement_XOseeEnumOverrideParserRuleCall_0(parent, this, 0, inst);
			case 1: return new OseeElement_OseeTypeParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOseeElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// XOseeEnumOverride
protected class OseeElement_XOseeEnumOverrideParserRuleCall_0 extends RuleCallToken {
	
	public OseeElement_XOseeEnumOverrideParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeElementAccess().getXOseeEnumOverrideParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumOverride_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(XOseeEnumOverride_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getXOseeEnumOverrideRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// OseeType
protected class OseeElement_OseeTypeParserRuleCall_1 extends RuleCallToken {
	
	public OseeElement_OseeTypeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeElementAccess().getOseeTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(OseeType_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getOseeTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule OseeElement ****************/


/************ begin Rule OseeType ****************
 *
 * OseeType:
 *   XArtifactType|XRelationType|XAttributeType|XOseeEnumType;
 *
 **/

// XArtifactType|XRelationType|XAttributeType|XOseeEnumType
protected class OseeType_Alternatives extends AlternativesToken {

	public OseeType_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OseeType_XArtifactTypeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new OseeType_XRelationTypeParserRuleCall_1(parent, this, 1, inst);
			case 2: return new OseeType_XAttributeTypeParserRuleCall_2(parent, this, 2, inst);
			case 3: return new OseeType_XOseeEnumTypeParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOseeTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// XArtifactType
protected class OseeType_XArtifactTypeParserRuleCall_0 extends RuleCallToken {
	
	public OseeType_XArtifactTypeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getXArtifactTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(XArtifactType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getXArtifactTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// XRelationType
protected class OseeType_XRelationTypeParserRuleCall_1 extends RuleCallToken {
	
	public OseeType_XRelationTypeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getXRelationTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(XRelationType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getXRelationTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// XAttributeType
protected class OseeType_XAttributeTypeParserRuleCall_2 extends RuleCallToken {
	
	public OseeType_XAttributeTypeParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getXAttributeTypeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(XAttributeType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getXAttributeTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// XOseeEnumType
protected class OseeType_XOseeEnumTypeParserRuleCall_3 extends RuleCallToken {
	
	public OseeType_XOseeEnumTypeParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOseeTypeAccess().getXOseeEnumTypeParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(XOseeEnumType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getXOseeEnumTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule OseeType ****************/


/************ begin Rule XArtifactType ****************
 *
 * XArtifactType:
 *   abstract?="abstract"? "artifactType" name=NAME_REFERENCE ("extends"
 *   superArtifactTypes+=[XArtifactType|NAME_REFERENCE] ("," superArtifactTypes+=[
 *   XArtifactType|NAME_REFERENCE])*)? "{" "guid" typeGuid=STRING validAttributeTypes+=
 *   XAttributeTypeRef* "}";
 *
 **/

// abstract?="abstract"? "artifactType" name=NAME_REFERENCE ("extends"
// superArtifactTypes+=[XArtifactType|NAME_REFERENCE] ("," superArtifactTypes+=[
// XArtifactType|NAME_REFERENCE])*)? "{" "guid" typeGuid=STRING validAttributeTypes+=
// XAttributeTypeRef* "}"
protected class XArtifactType_Group extends GroupToken {
	
	public XArtifactType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_RightCurlyBracketKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXArtifactTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// abstract?="abstract"?
protected class XArtifactType_AbstractAssignment_0 extends AssignmentToken  {
	
	public XArtifactType_AbstractAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getAbstractAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("abstract",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXArtifactTypeAccess().getAbstractAbstractKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "artifactType"
protected class XArtifactType_ArtifactTypeKeyword_1 extends KeywordToken  {
	
	public XArtifactType_ArtifactTypeKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getArtifactTypeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_AbstractAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=NAME_REFERENCE
protected class XArtifactType_NameAssignment_2 extends AssignmentToken  {
	
	public XArtifactType_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_ArtifactTypeKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXArtifactTypeAccess().getNameNAME_REFERENCEParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("extends" superArtifactTypes+=[XArtifactType|NAME_REFERENCE] (","
// superArtifactTypes+=[XArtifactType|NAME_REFERENCE])*)?
protected class XArtifactType_Group_3 extends GroupToken {
	
	public XArtifactType_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_Group_3_2(parent, this, 0, inst);
			case 1: return new XArtifactType_SuperArtifactTypesAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class XArtifactType_ExtendsKeyword_3_0 extends KeywordToken  {
	
	public XArtifactType_ExtendsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getExtendsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superArtifactTypes+=[XArtifactType|NAME_REFERENCE]
protected class XArtifactType_SuperArtifactTypesAssignment_3_1 extends AssignmentToken  {
	
	public XArtifactType_SuperArtifactTypesAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getSuperArtifactTypesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_ExtendsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superArtifactTypes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superArtifactTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXArtifactTypeAccess().getSuperArtifactTypesXArtifactTypeCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXArtifactTypeAccess().getSuperArtifactTypesXArtifactTypeCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," superArtifactTypes+=[XArtifactType|NAME_REFERENCE])*
protected class XArtifactType_Group_3_2 extends GroupToken {
	
	public XArtifactType_Group_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getGroup_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_SuperArtifactTypesAssignment_3_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class XArtifactType_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public XArtifactType_CommaKeyword_3_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getCommaKeyword_3_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_Group_3_2(parent, this, 0, inst);
			case 1: return new XArtifactType_SuperArtifactTypesAssignment_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// superArtifactTypes+=[XArtifactType|NAME_REFERENCE]
protected class XArtifactType_SuperArtifactTypesAssignment_3_2_1 extends AssignmentToken  {
	
	public XArtifactType_SuperArtifactTypesAssignment_3_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getSuperArtifactTypesAssignment_3_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_CommaKeyword_3_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superArtifactTypes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superArtifactTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXArtifactTypeAccess().getSuperArtifactTypesXArtifactTypeCrossReference_3_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXArtifactTypeAccess().getSuperArtifactTypesXArtifactTypeCrossReference_3_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// "{"
protected class XArtifactType_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public XArtifactType_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_Group_3(parent, this, 0, inst);
			case 1: return new XArtifactType_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "guid"
protected class XArtifactType_GuidKeyword_5 extends KeywordToken  {
	
	public XArtifactType_GuidKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getGuidKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_LeftCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// typeGuid=STRING
protected class XArtifactType_TypeGuidAssignment_6 extends AssignmentToken  {
	
	public XArtifactType_TypeGuidAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getTypeGuidAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_GuidKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeGuid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeGuid");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXArtifactTypeAccess().getTypeGuidSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// validAttributeTypes+=XAttributeTypeRef*
protected class XArtifactType_ValidAttributeTypesAssignment_7 extends AssignmentToken  {
	
	public XArtifactType_ValidAttributeTypesAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getValidAttributeTypesAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeTypeRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("validAttributeTypes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("validAttributeTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXAttributeTypeRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXArtifactTypeAccess().getValidAttributeTypesXAttributeTypeRefParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XArtifactType_ValidAttributeTypesAssignment_7(parent, next, actIndex, consumed);
			case 1: return new XArtifactType_TypeGuidAssignment_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class XArtifactType_RightCurlyBracketKeyword_8 extends KeywordToken  {
	
	public XArtifactType_RightCurlyBracketKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXArtifactTypeAccess().getRightCurlyBracketKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XArtifactType_ValidAttributeTypesAssignment_7(parent, this, 0, inst);
			case 1: return new XArtifactType_TypeGuidAssignment_6(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule XArtifactType ****************/


/************ begin Rule XAttributeTypeRef ****************
 *
 * XAttributeTypeRef:
 *   "attribute" validAttributeType=[XAttributeType|NAME_REFERENCE] ("branchGuid"
 *   branchGuid=STRING)?;
 *
 **/

// "attribute" validAttributeType=[XAttributeType|NAME_REFERENCE] ("branchGuid"
// branchGuid=STRING)?
protected class XAttributeTypeRef_Group extends GroupToken {
	
	public XAttributeTypeRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeRefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeTypeRef_Group_2(parent, this, 0, inst);
			case 1: return new XAttributeTypeRef_ValidAttributeTypeAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXAttributeTypeRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attribute"
protected class XAttributeTypeRef_AttributeKeyword_0 extends KeywordToken  {
	
	public XAttributeTypeRef_AttributeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeRefAccess().getAttributeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// validAttributeType=[XAttributeType|NAME_REFERENCE]
protected class XAttributeTypeRef_ValidAttributeTypeAssignment_1 extends AssignmentToken  {
	
	public XAttributeTypeRef_ValidAttributeTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeRefAccess().getValidAttributeTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeTypeRef_AttributeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("validAttributeType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("validAttributeType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXAttributeTypeRefAccess().getValidAttributeTypeXAttributeTypeCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXAttributeTypeRefAccess().getValidAttributeTypeXAttributeTypeCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("branchGuid" branchGuid=STRING)?
protected class XAttributeTypeRef_Group_2 extends GroupToken {
	
	public XAttributeTypeRef_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeRefAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeTypeRef_BranchGuidAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "branchGuid"
protected class XAttributeTypeRef_BranchGuidKeyword_2_0 extends KeywordToken  {
	
	public XAttributeTypeRef_BranchGuidKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeRefAccess().getBranchGuidKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeTypeRef_ValidAttributeTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// branchGuid=STRING
protected class XAttributeTypeRef_BranchGuidAssignment_2_1 extends AssignmentToken  {
	
	public XAttributeTypeRef_BranchGuidAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeRefAccess().getBranchGuidAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeTypeRef_BranchGuidKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("branchGuid",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("branchGuid");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeTypeRefAccess().getBranchGuidSTRINGTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule XAttributeTypeRef ****************/


/************ begin Rule XAttributeType ****************
 *
 * XAttributeType:
 *   "attributeType" name=NAME_REFERENCE ("extends" baseAttributeType=AttributeBaseType)
 *   ("overrides" override=[XAttributeType|NAME_REFERENCE])? "{" "guid" typeGuid=STRING
 *   "dataProvider" dataProvider=( "DefaultAttributeDataProvider" |
 *   "UriAttributeDataProvider" | QUALIFIED_NAME ) "min" min=WHOLE_NUM_STR "max" max=(
 *   WHOLE_NUM_STR | "unlimited" ) ("taggerId" taggerId=( "DefaultAttributeTaggerProvider" |
 *   QUALIFIED_NAME ))? ("enumType" enumType=[XOseeEnumType|NAME_REFERENCE])? (
 *   "description" description=STRING)? ("defaultValue" defaultValue=STRING)? (
 *   "fileExtension" fileExtension=STRING)? "}";
 *
 **/

// "attributeType" name=NAME_REFERENCE ("extends" baseAttributeType=AttributeBaseType)
// ("overrides" override=[XAttributeType|NAME_REFERENCE])? "{" "guid" typeGuid=STRING
// "dataProvider" dataProvider=( "DefaultAttributeDataProvider" |
// "UriAttributeDataProvider" | QUALIFIED_NAME ) "min" min=WHOLE_NUM_STR "max" max=(
// WHOLE_NUM_STR | "unlimited" ) ("taggerId" taggerId=( "DefaultAttributeTaggerProvider" |
// QUALIFIED_NAME ))? ("enumType" enumType=[XOseeEnumType|NAME_REFERENCE])? (
// "description" description=STRING)? ("defaultValue" defaultValue=STRING)? (
// "fileExtension" fileExtension=STRING)? "}"
protected class XAttributeType_Group extends GroupToken {
	
	public XAttributeType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_RightCurlyBracketKeyword_18(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXAttributeTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attributeType"
protected class XAttributeType_AttributeTypeKeyword_0 extends KeywordToken  {
	
	public XAttributeType_AttributeTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getAttributeTypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=NAME_REFERENCE
protected class XAttributeType_NameAssignment_1 extends AssignmentToken  {
	
	public XAttributeType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_AttributeTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXAttributeTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "extends" baseAttributeType=AttributeBaseType
protected class XAttributeType_Group_2 extends GroupToken {
	
	public XAttributeType_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_BaseAttributeTypeAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class XAttributeType_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public XAttributeType_ExtendsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getExtendsKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// baseAttributeType=AttributeBaseType
protected class XAttributeType_BaseAttributeTypeAssignment_2_1 extends AssignmentToken  {
	
	public XAttributeType_BaseAttributeTypeAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getBaseAttributeTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_ExtendsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("baseAttributeType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("baseAttributeType");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXAttributeTypeAccess().getBaseAttributeTypeAttributeBaseTypeParserRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ("overrides" override=[XAttributeType|NAME_REFERENCE])?
protected class XAttributeType_Group_3 extends GroupToken {
	
	public XAttributeType_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_OverrideAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "overrides"
protected class XAttributeType_OverridesKeyword_3_0 extends KeywordToken  {
	
	public XAttributeType_OverridesKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getOverridesKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// override=[XAttributeType|NAME_REFERENCE]
protected class XAttributeType_OverrideAssignment_3_1 extends AssignmentToken  {
	
	public XAttributeType_OverrideAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getOverrideAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_OverridesKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("override",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("override");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXAttributeTypeAccess().getOverrideXAttributeTypeCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXAttributeTypeAccess().getOverrideXAttributeTypeCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class XAttributeType_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public XAttributeType_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group_3(parent, this, 0, inst);
			case 1: return new XAttributeType_Group_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "guid"
protected class XAttributeType_GuidKeyword_5 extends KeywordToken  {
	
	public XAttributeType_GuidKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGuidKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_LeftCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// typeGuid=STRING
protected class XAttributeType_TypeGuidAssignment_6 extends AssignmentToken  {
	
	public XAttributeType_TypeGuidAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getTypeGuidAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_GuidKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeGuid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeGuid");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeTypeAccess().getTypeGuidSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// "dataProvider"
protected class XAttributeType_DataProviderKeyword_7 extends KeywordToken  {
	
	public XAttributeType_DataProviderKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getDataProviderKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_TypeGuidAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dataProvider=( "DefaultAttributeDataProvider" | "UriAttributeDataProvider" |
// QUALIFIED_NAME )
protected class XAttributeType_DataProviderAssignment_8 extends AssignmentToken  {
	
	public XAttributeType_DataProviderAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getDataProviderAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_DataProviderKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataProvider",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataProvider");
		if("DefaultAttributeDataProvider".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXAttributeTypeAccess().getDataProviderDefaultAttributeDataProviderKeyword_8_0_0();
			return obj;
		}
		if("UriAttributeDataProvider".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXAttributeTypeAccess().getDataProviderUriAttributeDataProviderKeyword_8_0_1();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXAttributeTypeAccess().getDataProviderQUALIFIED_NAMEParserRuleCall_8_0_2();
			return obj;
		}
		return null;
	}

}

// "min"
protected class XAttributeType_MinKeyword_9 extends KeywordToken  {
	
	public XAttributeType_MinKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getMinKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_DataProviderAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// min=WHOLE_NUM_STR
protected class XAttributeType_MinAssignment_10 extends AssignmentToken  {
	
	public XAttributeType_MinAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getMinAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_MinKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("min",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("min");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeTypeAccess().getMinWHOLE_NUM_STRTerminalRuleCall_10_0();
			return obj;
		}
		return null;
	}

}

// "max"
protected class XAttributeType_MaxKeyword_11 extends KeywordToken  {
	
	public XAttributeType_MaxKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getMaxKeyword_11();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_MinAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// max=( WHOLE_NUM_STR | "unlimited" )
protected class XAttributeType_MaxAssignment_12 extends AssignmentToken  {
	
	public XAttributeType_MaxAssignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getMaxAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_MaxKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("max",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("max");
		if("unlimited".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXAttributeTypeAccess().getMaxUnlimitedKeyword_12_0_1();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeTypeAccess().getMaxWHOLE_NUM_STRTerminalRuleCall_12_0_0();
			return obj;
		}
		return null;
	}

}

// ("taggerId" taggerId=( "DefaultAttributeTaggerProvider" | QUALIFIED_NAME ))?
protected class XAttributeType_Group_13 extends GroupToken {
	
	public XAttributeType_Group_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGroup_13();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_TaggerIdAssignment_13_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "taggerId"
protected class XAttributeType_TaggerIdKeyword_13_0 extends KeywordToken  {
	
	public XAttributeType_TaggerIdKeyword_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getTaggerIdKeyword_13_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_MaxAssignment_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// taggerId=( "DefaultAttributeTaggerProvider" | QUALIFIED_NAME )
protected class XAttributeType_TaggerIdAssignment_13_1 extends AssignmentToken  {
	
	public XAttributeType_TaggerIdAssignment_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getTaggerIdAssignment_13_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_TaggerIdKeyword_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("taggerId",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("taggerId");
		if("DefaultAttributeTaggerProvider".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXAttributeTypeAccess().getTaggerIdDefaultAttributeTaggerProviderKeyword_13_1_0_0();
			return obj;
		}
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXAttributeTypeAccess().getTaggerIdQUALIFIED_NAMEParserRuleCall_13_1_0_1();
			return obj;
		}
		return null;
	}

}


// ("enumType" enumType=[XOseeEnumType|NAME_REFERENCE])?
protected class XAttributeType_Group_14 extends GroupToken {
	
	public XAttributeType_Group_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGroup_14();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_EnumTypeAssignment_14_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "enumType"
protected class XAttributeType_EnumTypeKeyword_14_0 extends KeywordToken  {
	
	public XAttributeType_EnumTypeKeyword_14_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getEnumTypeKeyword_14_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group_13(parent, this, 0, inst);
			case 1: return new XAttributeType_MaxAssignment_12(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// enumType=[XOseeEnumType|NAME_REFERENCE]
protected class XAttributeType_EnumTypeAssignment_14_1 extends AssignmentToken  {
	
	public XAttributeType_EnumTypeAssignment_14_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getEnumTypeAssignment_14_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_EnumTypeKeyword_14_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumType",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXAttributeTypeAccess().getEnumTypeXOseeEnumTypeCrossReference_14_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXAttributeTypeAccess().getEnumTypeXOseeEnumTypeCrossReference_14_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ("description" description=STRING)?
protected class XAttributeType_Group_15 extends GroupToken {
	
	public XAttributeType_Group_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGroup_15();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_DescriptionAssignment_15_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "description"
protected class XAttributeType_DescriptionKeyword_15_0 extends KeywordToken  {
	
	public XAttributeType_DescriptionKeyword_15_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getDescriptionKeyword_15_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group_14(parent, this, 0, inst);
			case 1: return new XAttributeType_Group_13(parent, this, 1, inst);
			case 2: return new XAttributeType_MaxAssignment_12(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// description=STRING
protected class XAttributeType_DescriptionAssignment_15_1 extends AssignmentToken  {
	
	public XAttributeType_DescriptionAssignment_15_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getDescriptionAssignment_15_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_DescriptionKeyword_15_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeTypeAccess().getDescriptionSTRINGTerminalRuleCall_15_1_0();
			return obj;
		}
		return null;
	}

}


// ("defaultValue" defaultValue=STRING)?
protected class XAttributeType_Group_16 extends GroupToken {
	
	public XAttributeType_Group_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGroup_16();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_DefaultValueAssignment_16_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "defaultValue"
protected class XAttributeType_DefaultValueKeyword_16_0 extends KeywordToken  {
	
	public XAttributeType_DefaultValueKeyword_16_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getDefaultValueKeyword_16_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group_15(parent, this, 0, inst);
			case 1: return new XAttributeType_Group_14(parent, this, 1, inst);
			case 2: return new XAttributeType_Group_13(parent, this, 2, inst);
			case 3: return new XAttributeType_MaxAssignment_12(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// defaultValue=STRING
protected class XAttributeType_DefaultValueAssignment_16_1 extends AssignmentToken  {
	
	public XAttributeType_DefaultValueAssignment_16_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getDefaultValueAssignment_16_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_DefaultValueKeyword_16_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultValue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValue");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeTypeAccess().getDefaultValueSTRINGTerminalRuleCall_16_1_0();
			return obj;
		}
		return null;
	}

}


// ("fileExtension" fileExtension=STRING)?
protected class XAttributeType_Group_17 extends GroupToken {
	
	public XAttributeType_Group_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getGroup_17();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_FileExtensionAssignment_17_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "fileExtension"
protected class XAttributeType_FileExtensionKeyword_17_0 extends KeywordToken  {
	
	public XAttributeType_FileExtensionKeyword_17_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getFileExtensionKeyword_17_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group_16(parent, this, 0, inst);
			case 1: return new XAttributeType_Group_15(parent, this, 1, inst);
			case 2: return new XAttributeType_Group_14(parent, this, 2, inst);
			case 3: return new XAttributeType_Group_13(parent, this, 3, inst);
			case 4: return new XAttributeType_MaxAssignment_12(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// fileExtension=STRING
protected class XAttributeType_FileExtensionAssignment_17_1 extends AssignmentToken  {
	
	public XAttributeType_FileExtensionAssignment_17_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getFileExtensionAssignment_17_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_FileExtensionKeyword_17_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fileExtension",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fileExtension");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXAttributeTypeAccess().getFileExtensionSTRINGTerminalRuleCall_17_1_0();
			return obj;
		}
		return null;
	}

}


// "}"
protected class XAttributeType_RightCurlyBracketKeyword_18 extends KeywordToken  {
	
	public XAttributeType_RightCurlyBracketKeyword_18(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXAttributeTypeAccess().getRightCurlyBracketKeyword_18();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XAttributeType_Group_17(parent, this, 0, inst);
			case 1: return new XAttributeType_Group_16(parent, this, 1, inst);
			case 2: return new XAttributeType_Group_15(parent, this, 2, inst);
			case 3: return new XAttributeType_Group_14(parent, this, 3, inst);
			case 4: return new XAttributeType_Group_13(parent, this, 4, inst);
			case 5: return new XAttributeType_MaxAssignment_12(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule XAttributeType ****************/



/************ begin Rule XOseeEnumType ****************
 *
 * XOseeEnumType:
 *   "oseeEnumType" name=NAME_REFERENCE "{" "guid" typeGuid=STRING enumEntries+=
 *   XOseeEnumEntry* "}";
 *
 **/

// "oseeEnumType" name=NAME_REFERENCE "{" "guid" typeGuid=STRING enumEntries+=
// XOseeEnumEntry* "}"
protected class XOseeEnumType_Group extends GroupToken {
	
	public XOseeEnumType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXOseeEnumTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumType_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXOseeEnumTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "oseeEnumType"
protected class XOseeEnumType_OseeEnumTypeKeyword_0 extends KeywordToken  {
	
	public XOseeEnumType_OseeEnumTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumTypeAccess().getOseeEnumTypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=NAME_REFERENCE
protected class XOseeEnumType_NameAssignment_1 extends AssignmentToken  {
	
	public XOseeEnumType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumType_OseeEnumTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXOseeEnumTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class XOseeEnumType_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public XOseeEnumType_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumTypeAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "guid"
protected class XOseeEnumType_GuidKeyword_3 extends KeywordToken  {
	
	public XOseeEnumType_GuidKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumTypeAccess().getGuidKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumType_LeftCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// typeGuid=STRING
protected class XOseeEnumType_TypeGuidAssignment_4 extends AssignmentToken  {
	
	public XOseeEnumType_TypeGuidAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumTypeAccess().getTypeGuidAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumType_GuidKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeGuid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeGuid");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXOseeEnumTypeAccess().getTypeGuidSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// enumEntries+=XOseeEnumEntry*
protected class XOseeEnumType_EnumEntriesAssignment_5 extends AssignmentToken  {
	
	public XOseeEnumType_EnumEntriesAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumTypeAccess().getEnumEntriesAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumEntries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumEntries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXOseeEnumEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXOseeEnumTypeAccess().getEnumEntriesXOseeEnumEntryParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XOseeEnumType_EnumEntriesAssignment_5(parent, next, actIndex, consumed);
			case 1: return new XOseeEnumType_TypeGuidAssignment_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class XOseeEnumType_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public XOseeEnumType_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumTypeAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumType_EnumEntriesAssignment_5(parent, this, 0, inst);
			case 1: return new XOseeEnumType_TypeGuidAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule XOseeEnumType ****************/


/************ begin Rule XOseeEnumEntry ****************
 *
 * XOseeEnumEntry:
 *   "entry" name=NAME_REFERENCE ordinal=WHOLE_NUM_STR? ("entryGuid" entryGuid=STRING)?;
 *
 **/

// "entry" name=NAME_REFERENCE ordinal=WHOLE_NUM_STR? ("entryGuid" entryGuid=STRING)?
protected class XOseeEnumEntry_Group extends GroupToken {
	
	public XOseeEnumEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXOseeEnumEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumEntry_Group_3(parent, this, 0, inst);
			case 1: return new XOseeEnumEntry_OrdinalAssignment_2(parent, this, 1, inst);
			case 2: return new XOseeEnumEntry_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXOseeEnumEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "entry"
protected class XOseeEnumEntry_EntryKeyword_0 extends KeywordToken  {
	
	public XOseeEnumEntry_EntryKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumEntryAccess().getEntryKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=NAME_REFERENCE
protected class XOseeEnumEntry_NameAssignment_1 extends AssignmentToken  {
	
	public XOseeEnumEntry_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumEntryAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumEntry_EntryKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXOseeEnumEntryAccess().getNameNAME_REFERENCEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ordinal=WHOLE_NUM_STR?
protected class XOseeEnumEntry_OrdinalAssignment_2 extends AssignmentToken  {
	
	public XOseeEnumEntry_OrdinalAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumEntryAccess().getOrdinalAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumEntry_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ordinal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordinal");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXOseeEnumEntryAccess().getOrdinalWHOLE_NUM_STRTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("entryGuid" entryGuid=STRING)?
protected class XOseeEnumEntry_Group_3 extends GroupToken {
	
	public XOseeEnumEntry_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXOseeEnumEntryAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumEntry_EntryGuidAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "entryGuid"
protected class XOseeEnumEntry_EntryGuidKeyword_3_0 extends KeywordToken  {
	
	public XOseeEnumEntry_EntryGuidKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumEntryAccess().getEntryGuidKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumEntry_OrdinalAssignment_2(parent, this, 0, inst);
			case 1: return new XOseeEnumEntry_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entryGuid=STRING
protected class XOseeEnumEntry_EntryGuidAssignment_3_1 extends AssignmentToken  {
	
	public XOseeEnumEntry_EntryGuidAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumEntryAccess().getEntryGuidAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumEntry_EntryGuidKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entryGuid",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entryGuid");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXOseeEnumEntryAccess().getEntryGuidSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule XOseeEnumEntry ****************/


/************ begin Rule XOseeEnumOverride ****************
 *
 * XOseeEnumOverride:
 *   "overrides enum" overridenEnumType=[XOseeEnumType|NAME_REFERENCE] "{" inheritAll?=
 *   "inheritAll"? overrideOptions+=OverrideOption* "}";
 *
 **/

// "overrides enum" overridenEnumType=[XOseeEnumType|NAME_REFERENCE] "{" inheritAll?=
// "inheritAll"? overrideOptions+=OverrideOption* "}"
protected class XOseeEnumOverride_Group extends GroupToken {
	
	public XOseeEnumOverride_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXOseeEnumOverrideAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumOverride_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXOseeEnumOverrideRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "overrides enum"
protected class XOseeEnumOverride_OverridesEnumKeyword_0 extends KeywordToken  {
	
	public XOseeEnumOverride_OverridesEnumKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumOverrideAccess().getOverridesEnumKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// overridenEnumType=[XOseeEnumType|NAME_REFERENCE]
protected class XOseeEnumOverride_OverridenEnumTypeAssignment_1 extends AssignmentToken  {
	
	public XOseeEnumOverride_OverridenEnumTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumOverrideAccess().getOverridenEnumTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumOverride_OverridesEnumKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("overridenEnumType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("overridenEnumType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXOseeEnumOverrideAccess().getOverridenEnumTypeXOseeEnumTypeCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXOseeEnumOverrideAccess().getOverridenEnumTypeXOseeEnumTypeCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "{"
protected class XOseeEnumOverride_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public XOseeEnumOverride_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumOverrideAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumOverride_OverridenEnumTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// inheritAll?="inheritAll"?
protected class XOseeEnumOverride_InheritAllAssignment_3 extends AssignmentToken  {
	
	public XOseeEnumOverride_InheritAllAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumOverrideAccess().getInheritAllAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumOverride_LeftCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inheritAll",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inheritAll");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getXOseeEnumOverrideAccess().getInheritAllInheritAllKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// overrideOptions+=OverrideOption*
protected class XOseeEnumOverride_OverrideOptionsAssignment_4 extends AssignmentToken  {
	
	public XOseeEnumOverride_OverrideOptionsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXOseeEnumOverrideAccess().getOverrideOptionsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverrideOption_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("overrideOptions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("overrideOptions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOverrideOptionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getXOseeEnumOverrideAccess().getOverrideOptionsOverrideOptionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new XOseeEnumOverride_OverrideOptionsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new XOseeEnumOverride_InheritAllAssignment_3(parent, next, actIndex, consumed);
			case 2: return new XOseeEnumOverride_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class XOseeEnumOverride_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public XOseeEnumOverride_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXOseeEnumOverrideAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XOseeEnumOverride_OverrideOptionsAssignment_4(parent, this, 0, inst);
			case 1: return new XOseeEnumOverride_InheritAllAssignment_3(parent, this, 1, inst);
			case 2: return new XOseeEnumOverride_LeftCurlyBracketKeyword_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule XOseeEnumOverride ****************/


/************ begin Rule OverrideOption ****************
 *
 * OverrideOption:
 *   AddEnum|RemoveEnum;
 *
 **/

// AddEnum|RemoveEnum
protected class OverrideOption_Alternatives extends AlternativesToken {

	public OverrideOption_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOverrideOptionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OverrideOption_AddEnumParserRuleCall_0(parent, this, 0, inst);
			case 1: return new OverrideOption_RemoveEnumParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOverrideOptionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AddEnum
protected class OverrideOption_AddEnumParserRuleCall_0 extends RuleCallToken {
	
	public OverrideOption_AddEnumParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOverrideOptionAccess().getAddEnumParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AddEnum_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AddEnum_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAddEnumRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// RemoveEnum
protected class OverrideOption_RemoveEnumParserRuleCall_1 extends RuleCallToken {
	
	public OverrideOption_RemoveEnumParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOverrideOptionAccess().getRemoveEnumParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RemoveEnum_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(RemoveEnum_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getRemoveEnumRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule OverrideOption ****************/


/************ begin Rule AddEnum ****************
 *
 * AddEnum:
 *   "add" enumEntry=NAME_REFERENCE ordinal=WHOLE_NUM_STR? ("entryGuid" entryGuid=STRING)
 *   ?;
 *
 **/

// "add" enumEntry=NAME_REFERENCE ordinal=WHOLE_NUM_STR? ("entryGuid" entryGuid=STRING)
// ?
protected class AddEnum_Group extends GroupToken {
	
	public AddEnum_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddEnumAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AddEnum_Group_3(parent, this, 0, inst);
			case 1: return new AddEnum_OrdinalAssignment_2(parent, this, 1, inst);
			case 2: return new AddEnum_EnumEntryAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAddEnumRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "add"
protected class AddEnum_AddKeyword_0 extends KeywordToken  {
	
	public AddEnum_AddKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddEnumAccess().getAddKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// enumEntry=NAME_REFERENCE
protected class AddEnum_EnumEntryAssignment_1 extends AssignmentToken  {
	
	public AddEnum_EnumEntryAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddEnumAccess().getEnumEntryAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AddEnum_AddKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumEntry",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumEntry");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getAddEnumAccess().getEnumEntryNAME_REFERENCEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ordinal=WHOLE_NUM_STR?
protected class AddEnum_OrdinalAssignment_2 extends AssignmentToken  {
	
	public AddEnum_OrdinalAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddEnumAccess().getOrdinalAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AddEnum_EnumEntryAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ordinal",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordinal");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAddEnumAccess().getOrdinalWHOLE_NUM_STRTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("entryGuid" entryGuid=STRING)?
protected class AddEnum_Group_3 extends GroupToken {
	
	public AddEnum_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddEnumAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AddEnum_EntryGuidAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "entryGuid"
protected class AddEnum_EntryGuidKeyword_3_0 extends KeywordToken  {
	
	public AddEnum_EntryGuidKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddEnumAccess().getEntryGuidKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AddEnum_OrdinalAssignment_2(parent, this, 0, inst);
			case 1: return new AddEnum_EnumEntryAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entryGuid=STRING
protected class AddEnum_EntryGuidAssignment_3_1 extends AssignmentToken  {
	
	public AddEnum_EntryGuidAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddEnumAccess().getEntryGuidAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AddEnum_EntryGuidKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entryGuid",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entryGuid");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getAddEnumAccess().getEntryGuidSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule AddEnum ****************/


/************ begin Rule RemoveEnum ****************
 *
 * RemoveEnum:
 *   "remove" enumEntry=[XOseeEnumEntry|NAME_REFERENCE];
 *
 **/

// "remove" enumEntry=[XOseeEnumEntry|NAME_REFERENCE]
protected class RemoveEnum_Group extends GroupToken {
	
	public RemoveEnum_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRemoveEnumAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RemoveEnum_EnumEntryAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRemoveEnumRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "remove"
protected class RemoveEnum_RemoveKeyword_0 extends KeywordToken  {
	
	public RemoveEnum_RemoveKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRemoveEnumAccess().getRemoveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// enumEntry=[XOseeEnumEntry|NAME_REFERENCE]
protected class RemoveEnum_EnumEntryAssignment_1 extends AssignmentToken  {
	
	public RemoveEnum_EnumEntryAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRemoveEnumAccess().getEnumEntryAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RemoveEnum_RemoveKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumEntry",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumEntry");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRemoveEnumAccess().getEnumEntryXOseeEnumEntryCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRemoveEnumAccess().getEnumEntryXOseeEnumEntryCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule RemoveEnum ****************/


/************ begin Rule XRelationType ****************
 *
 * XRelationType:
 *   "relationType" name=NAME_REFERENCE "{" "guid" typeGuid=STRING "sideAName" sideAName=
 *   STRING "sideAArtifactType" sideAArtifactType=[XArtifactType|NAME_REFERENCE]
 *   "sideBName" sideBName=STRING "sideBArtifactType" sideBArtifactType=[XArtifactType|
 *   NAME_REFERENCE] "defaultOrderType" defaultOrderType=RelationOrderType
 *   "multiplicity" multiplicity=RelationMultiplicityEnum "}";
 *
 **/

// "relationType" name=NAME_REFERENCE "{" "guid" typeGuid=STRING "sideAName" sideAName=
// STRING "sideAArtifactType" sideAArtifactType=[XArtifactType|NAME_REFERENCE]
// "sideBName" sideBName=STRING "sideBArtifactType" sideBArtifactType=[XArtifactType|
// NAME_REFERENCE] "defaultOrderType" defaultOrderType=RelationOrderType
// "multiplicity" multiplicity=RelationMultiplicityEnum "}"
protected class XRelationType_Group extends GroupToken {
	
	public XRelationType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_RightCurlyBracketKeyword_17(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getXRelationTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "relationType"
protected class XRelationType_RelationTypeKeyword_0 extends KeywordToken  {
	
	public XRelationType_RelationTypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getRelationTypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=NAME_REFERENCE
protected class XRelationType_NameAssignment_1 extends AssignmentToken  {
	
	public XRelationType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_RelationTypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXRelationTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class XRelationType_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public XRelationType_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "guid"
protected class XRelationType_GuidKeyword_3 extends KeywordToken  {
	
	public XRelationType_GuidKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getGuidKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_LeftCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// typeGuid=STRING
protected class XRelationType_TypeGuidAssignment_4 extends AssignmentToken  {
	
	public XRelationType_TypeGuidAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getTypeGuidAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_GuidKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("typeGuid",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("typeGuid");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXRelationTypeAccess().getTypeGuidSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "sideAName"
protected class XRelationType_SideANameKeyword_5 extends KeywordToken  {
	
	public XRelationType_SideANameKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getSideANameKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_TypeGuidAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sideAName=STRING
protected class XRelationType_SideANameAssignment_6 extends AssignmentToken  {
	
	public XRelationType_SideANameAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getSideANameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_SideANameKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sideAName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sideAName");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXRelationTypeAccess().getSideANameSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// "sideAArtifactType"
protected class XRelationType_SideAArtifactTypeKeyword_7 extends KeywordToken  {
	
	public XRelationType_SideAArtifactTypeKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getSideAArtifactTypeKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_SideANameAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sideAArtifactType=[XArtifactType|NAME_REFERENCE]
protected class XRelationType_SideAArtifactTypeAssignment_8 extends AssignmentToken  {
	
	public XRelationType_SideAArtifactTypeAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getSideAArtifactTypeAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_SideAArtifactTypeKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sideAArtifactType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sideAArtifactType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXRelationTypeAccess().getSideAArtifactTypeXArtifactTypeCrossReference_8_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXRelationTypeAccess().getSideAArtifactTypeXArtifactTypeCrossReference_8_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "sideBName"
protected class XRelationType_SideBNameKeyword_9 extends KeywordToken  {
	
	public XRelationType_SideBNameKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getSideBNameKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_SideAArtifactTypeAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sideBName=STRING
protected class XRelationType_SideBNameAssignment_10 extends AssignmentToken  {
	
	public XRelationType_SideBNameAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getSideBNameAssignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_SideBNameKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sideBName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sideBName");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.LRC;
			element = grammarAccess.getXRelationTypeAccess().getSideBNameSTRINGTerminalRuleCall_10_0();
			return obj;
		}
		return null;
	}

}

// "sideBArtifactType"
protected class XRelationType_SideBArtifactTypeKeyword_11 extends KeywordToken  {
	
	public XRelationType_SideBArtifactTypeKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getSideBArtifactTypeKeyword_11();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_SideBNameAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sideBArtifactType=[XArtifactType|NAME_REFERENCE]
protected class XRelationType_SideBArtifactTypeAssignment_12 extends AssignmentToken  {
	
	public XRelationType_SideBArtifactTypeAssignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getSideBArtifactTypeAssignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_SideBArtifactTypeKeyword_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sideBArtifactType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sideBArtifactType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getXRelationTypeAccess().getSideBArtifactTypeXArtifactTypeCrossReference_12_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getXRelationTypeAccess().getSideBArtifactTypeXArtifactTypeCrossReference_12_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "defaultOrderType"
protected class XRelationType_DefaultOrderTypeKeyword_13 extends KeywordToken  {
	
	public XRelationType_DefaultOrderTypeKeyword_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getDefaultOrderTypeKeyword_13();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_SideBArtifactTypeAssignment_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// defaultOrderType=RelationOrderType
protected class XRelationType_DefaultOrderTypeAssignment_14 extends AssignmentToken  {
	
	public XRelationType_DefaultOrderTypeAssignment_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getDefaultOrderTypeAssignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_DefaultOrderTypeKeyword_13(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultOrderType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultOrderType");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getXRelationTypeAccess().getDefaultOrderTypeRelationOrderTypeParserRuleCall_14_0();
			return obj;
		}
		return null;
	}

}

// "multiplicity"
protected class XRelationType_MultiplicityKeyword_15 extends KeywordToken  {
	
	public XRelationType_MultiplicityKeyword_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getMultiplicityKeyword_15();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_DefaultOrderTypeAssignment_14(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// multiplicity=RelationMultiplicityEnum
protected class XRelationType_MultiplicityAssignment_16 extends AssignmentToken  {
	
	public XRelationType_MultiplicityAssignment_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getMultiplicityAssignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_MultiplicityKeyword_15(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("multiplicity",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multiplicity");
		if(Boolean.TRUE.booleanValue()) {  
			type = AssignmentType.ERC;
			element = grammarAccess.getXRelationTypeAccess().getMultiplicityRelationMultiplicityEnumEnumRuleCall_16_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class XRelationType_RightCurlyBracketKeyword_17 extends KeywordToken  {
	
	public XRelationType_RightCurlyBracketKeyword_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getXRelationTypeAccess().getRightCurlyBracketKeyword_17();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new XRelationType_MultiplicityAssignment_16(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule XRelationType ****************/


}
