/*
* generated by Xtext
*/
grammar InternalOseeTypes;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.osee.framework.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.osee.framework.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.osee.framework.services.OseeTypesGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private OseeTypesGrammarAccess grammarAccess;
 	
    public InternalOseeTypesParser(TokenStream input, IAstFactory factory, OseeTypesGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/osee/framework/parser/antlr/internal/InternalOseeTypes.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "OseeTypeModel";	
   	}
   	
   	@Override
   	protected OseeTypesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOseeTypeModel
entryRuleOseeTypeModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOseeTypeModelRule(), currentNode); }
	 iv_ruleOseeTypeModel=ruleOseeTypeModel 
	 { $current=$iv_ruleOseeTypeModel.current; } 
	 EOF 
;

// Rule OseeTypeModel
ruleOseeTypeModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getArtifactTypesXArtifactTypeParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_artifactTypes_1_0=ruleXArtifactType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"artifactTypes",
	        		lv_artifactTypes_1_0, 
	        		"XArtifactType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getRelationTypesXRelationTypeParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_relationTypes_2_0=ruleXRelationType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"relationTypes",
	        		lv_relationTypes_2_0, 
	        		"XRelationType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getAttributeTypesXAttributeTypeParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_attributeTypes_3_0=ruleXAttributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributeTypes",
	        		lv_attributeTypes_3_0, 
	        		"XAttributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getEnumTypesXOseeEnumTypeParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_enumTypes_4_0=ruleXOseeEnumType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"enumTypes",
	        		lv_enumTypes_4_0, 
	        		"XOseeEnumType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOseeTypeModelAccess().getEnumOverridesXOseeEnumOverrideParserRuleCall_1_4_0(), currentNode); 
	    }
		lv_enumOverrides_5_0=ruleXOseeEnumOverride		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOseeTypeModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"enumOverrides",
	        		lv_enumOverrides_5_0, 
	        		"XOseeEnumOverride", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleNAME_REFERENCE
entryRuleNAME_REFERENCE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNAME_REFERENCERule(), currentNode); } 
	 iv_ruleNAME_REFERENCE=ruleNAME_REFERENCE 
	 { $current=$iv_ruleNAME_REFERENCE.current.getText(); }  
	 EOF 
;

// Rule NAME_REFERENCE
ruleNAME_REFERENCE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getNAME_REFERENCEAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleQUALIFIED_NAME
entryRuleQUALIFIED_NAME returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQUALIFIED_NAMERule(), currentNode); } 
	 iv_ruleQUALIFIED_NAME=ruleQUALIFIED_NAME 
	 { $current=$iv_ruleQUALIFIED_NAME.current.getText(); }  
	 EOF 
;

// Rule QUALIFIED_NAME
ruleQUALIFIED_NAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQUALIFIED_NAMEAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQUALIFIED_NAMEAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getQUALIFIED_NAMEAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;







// Entry rule entryRuleOseeType
entryRuleOseeType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOseeTypeRule(), currentNode); }
	 iv_ruleOseeType=ruleOseeType 
	 { $current=$iv_ruleOseeType.current; } 
	 EOF 
;

// Rule OseeType
ruleOseeType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOseeTypeAccess().getXArtifactTypeParserRuleCall_0(), currentNode); 
    }
    this_XArtifactType_0=ruleXArtifactType
    { 
        $current = $this_XArtifactType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOseeTypeAccess().getXRelationTypeParserRuleCall_1(), currentNode); 
    }
    this_XRelationType_1=ruleXRelationType
    { 
        $current = $this_XRelationType_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOseeTypeAccess().getXAttributeTypeParserRuleCall_2(), currentNode); 
    }
    this_XAttributeType_2=ruleXAttributeType
    { 
        $current = $this_XAttributeType_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOseeTypeAccess().getXOseeEnumTypeParserRuleCall_3(), currentNode); 
    }
    this_XOseeEnumType_3=ruleXOseeEnumType
    { 
        $current = $this_XOseeEnumType_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleXArtifactType
entryRuleXArtifactType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXArtifactTypeRule(), currentNode); }
	 iv_ruleXArtifactType=ruleXArtifactType 
	 { $current=$iv_ruleXArtifactType.current; } 
	 EOF 
;

// Rule XArtifactType
ruleXArtifactType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_abstract_0_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getXArtifactTypeAccess().getAbstractAbstractKeyword_0_0(), "abstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "abstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'artifactType' 
    {
        createLeafNode(grammarAccess.getXArtifactTypeAccess().getArtifactTypeKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXArtifactTypeAccess().getNameNAME_REFERENCEParserRuleCall_2_0(), currentNode); 
	    }
		lv_name_2_0=ruleNAME_REFERENCE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"NAME_REFERENCE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getXArtifactTypeAccess().getExtendsKeyword_3_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getXArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXArtifactTypeAccess().getSuperArtifactTypesXArtifactTypeCrossReference_3_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getXArtifactTypeAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getXArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXArtifactTypeAccess().getSuperArtifactTypesXArtifactTypeCrossReference_3_2_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getXArtifactTypeAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
	'guid' 
    {
        createLeafNode(grammarAccess.getXArtifactTypeAccess().getGuidKeyword_5(), null); 
    }
(
(
		lv_typeGuid_9_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXArtifactTypeAccess().getTypeGuidSTRINGTerminalRuleCall_6_0(), "typeGuid"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeGuid",
	        		lv_typeGuid_9_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXArtifactTypeAccess().getValidAttributeTypesXAttributeTypeRefParserRuleCall_7_0(), currentNode); 
	    }
		lv_validAttributeTypes_10_0=ruleXAttributeTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXArtifactTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"validAttributeTypes",
	        		lv_validAttributeTypes_10_0, 
	        		"XAttributeTypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getXArtifactTypeAccess().getRightCurlyBracketKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleXAttributeTypeRef
entryRuleXAttributeTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXAttributeTypeRefRule(), currentNode); }
	 iv_ruleXAttributeTypeRef=ruleXAttributeTypeRef 
	 { $current=$iv_ruleXAttributeTypeRef.current; } 
	 EOF 
;

// Rule XAttributeTypeRef
ruleXAttributeTypeRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'attribute' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeRefAccess().getAttributeKeyword_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXAttributeTypeRefAccess().getValidAttributeTypeXAttributeTypeCrossReference_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	'branchGuid' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeRefAccess().getBranchGuidKeyword_2_0(), null); 
    }
(
(
		lv_branchGuid_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXAttributeTypeRefAccess().getBranchGuidSTRINGTerminalRuleCall_2_1_0(), "branchGuid"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"branchGuid",
	        		lv_branchGuid_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleXAttributeType
entryRuleXAttributeType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXAttributeTypeRule(), currentNode); }
	 iv_ruleXAttributeType=ruleXAttributeType 
	 { $current=$iv_ruleXAttributeType.current; } 
	 EOF 
;

// Rule XAttributeType
ruleXAttributeType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'attributeType' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getAttributeTypeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXAttributeTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleNAME_REFERENCE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"NAME_REFERENCE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getExtendsKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXAttributeTypeAccess().getBaseAttributeTypeAttributeBaseTypeParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_baseAttributeType_3_0=ruleAttributeBaseType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"baseAttributeType",
	        		lv_baseAttributeType_3_0, 
	        		"AttributeBaseType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(	'overrides' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getOverridesKeyword_3_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXAttributeTypeAccess().getOverrideXAttributeTypeCrossReference_3_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
	'guid' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getGuidKeyword_5(), null); 
    }
(
(
		lv_typeGuid_8_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXAttributeTypeAccess().getTypeGuidSTRINGTerminalRuleCall_6_0(), "typeGuid"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeGuid",
	        		lv_typeGuid_8_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'dataProvider' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getDataProviderKeyword_7(), null); 
    }
(
(
(
		lv_dataProvider_10_1=	'DefaultAttributeDataProvider' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getDataProviderDefaultAttributeDataProviderKeyword_8_0_0(), "dataProvider"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dataProvider", lv_dataProvider_10_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_dataProvider_10_2=	'UriAttributeDataProvider' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getDataProviderUriAttributeDataProviderKeyword_8_0_1(), "dataProvider"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dataProvider", lv_dataProvider_10_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getXAttributeTypeAccess().getDataProviderQUALIFIED_NAMEParserRuleCall_8_0_2(), currentNode); 
	    }
		lv_dataProvider_10_3=ruleQUALIFIED_NAME		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dataProvider",
	        		lv_dataProvider_10_3, 
	        		"QUALIFIED_NAME", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)	'min' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getMinKeyword_9(), null); 
    }
(
(
		lv_min_12_0=RULE_WHOLE_NUM_STR
		{
			createLeafNode(grammarAccess.getXAttributeTypeAccess().getMinWHOLE_NUM_STRTerminalRuleCall_10_0(), "min"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"min",
	        		lv_min_12_0, 
	        		"WHOLE_NUM_STR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'max' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getMaxKeyword_11(), null); 
    }
(
(
(
		lv_max_14_1=RULE_WHOLE_NUM_STR
		{
			createLeafNode(grammarAccess.getXAttributeTypeAccess().getMaxWHOLE_NUM_STRTerminalRuleCall_12_0_0(), "max"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"max",
	        		lv_max_14_1, 
	        		"WHOLE_NUM_STR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_max_14_2=	'unlimited' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getMaxUnlimitedKeyword_12_0_1(), "max"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "max", lv_max_14_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	'taggerId' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getTaggerIdKeyword_13_0(), null); 
    }
(
(
(
		lv_taggerId_16_1=	'DefaultAttributeTaggerProvider' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getTaggerIdDefaultAttributeTaggerProviderKeyword_13_1_0_0(), "taggerId"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "taggerId", lv_taggerId_16_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getXAttributeTypeAccess().getTaggerIdQUALIFIED_NAMEParserRuleCall_13_1_0_1(), currentNode); 
	    }
		lv_taggerId_16_2=ruleQUALIFIED_NAME		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"taggerId",
	        		lv_taggerId_16_2, 
	        		"QUALIFIED_NAME", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?(	'enumType' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getEnumTypeKeyword_14_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXAttributeTypeAccess().getEnumTypeXOseeEnumTypeCrossReference_14_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
))?(	'description' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getDescriptionKeyword_15_0(), null); 
    }
(
(
		lv_description_20_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXAttributeTypeAccess().getDescriptionSTRINGTerminalRuleCall_15_1_0(), "description"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"description",
	        		lv_description_20_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'defaultValue' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getDefaultValueKeyword_16_0(), null); 
    }
(
(
		lv_defaultValue_22_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXAttributeTypeAccess().getDefaultValueSTRINGTerminalRuleCall_16_1_0(), "defaultValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValue",
	        		lv_defaultValue_22_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'fileExtension' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getFileExtensionKeyword_17_0(), null); 
    }
(
(
		lv_fileExtension_24_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXAttributeTypeAccess().getFileExtensionSTRINGTerminalRuleCall_17_1_0(), "fileExtension"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXAttributeTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fileExtension",
	        		lv_fileExtension_24_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	'}' 
    {
        createLeafNode(grammarAccess.getXAttributeTypeAccess().getRightCurlyBracketKeyword_18(), null); 
    }
)
;





// Entry rule entryRuleAttributeBaseType
entryRuleAttributeBaseType returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeBaseTypeRule(), currentNode); } 
	 iv_ruleAttributeBaseType=ruleAttributeBaseType 
	 { $current=$iv_ruleAttributeBaseType.current.getText(); }  
	 EOF 
;

// Rule AttributeBaseType
ruleAttributeBaseType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='BooleanAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getBooleanAttributeKeyword_0(), null); 
    }

    |
	kw='CompressedContentAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getCompressedContentAttributeKeyword_1(), null); 
    }

    |
	kw='DateAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getDateAttributeKeyword_2(), null); 
    }

    |
	kw='EnumeratedAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getEnumeratedAttributeKeyword_3(), null); 
    }

    |
	kw='FloatingPointAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getFloatingPointAttributeKeyword_4(), null); 
    }

    |
	kw='IntegerAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getIntegerAttributeKeyword_5(), null); 
    }

    |
	kw='JavaObjectAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getJavaObjectAttributeKeyword_6(), null); 
    }

    |
	kw='StringAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getStringAttributeKeyword_7(), null); 
    }

    |
	kw='WordAttribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeBaseTypeAccess().getWordAttributeKeyword_8(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeBaseTypeAccess().getQUALIFIED_NAMEParserRuleCall_9(), currentNode); 
    }
    this_QUALIFIED_NAME_9=ruleQUALIFIED_NAME    {
		$current.merge(this_QUALIFIED_NAME_9);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleXOseeEnumType
entryRuleXOseeEnumType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXOseeEnumTypeRule(), currentNode); }
	 iv_ruleXOseeEnumType=ruleXOseeEnumType 
	 { $current=$iv_ruleXOseeEnumType.current; } 
	 EOF 
;

// Rule XOseeEnumType
ruleXOseeEnumType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'oseeEnumType' 
    {
        createLeafNode(grammarAccess.getXOseeEnumTypeAccess().getOseeEnumTypeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXOseeEnumTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleNAME_REFERENCE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"NAME_REFERENCE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getXOseeEnumTypeAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
	'guid' 
    {
        createLeafNode(grammarAccess.getXOseeEnumTypeAccess().getGuidKeyword_3(), null); 
    }
(
(
		lv_typeGuid_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXOseeEnumTypeAccess().getTypeGuidSTRINGTerminalRuleCall_4_0(), "typeGuid"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeGuid",
	        		lv_typeGuid_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXOseeEnumTypeAccess().getEnumEntriesXOseeEnumEntryParserRuleCall_5_0(), currentNode); 
	    }
		lv_enumEntries_5_0=ruleXOseeEnumEntry		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"enumEntries",
	        		lv_enumEntries_5_0, 
	        		"XOseeEnumEntry", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getXOseeEnumTypeAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleXOseeEnumEntry
entryRuleXOseeEnumEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXOseeEnumEntryRule(), currentNode); }
	 iv_ruleXOseeEnumEntry=ruleXOseeEnumEntry 
	 { $current=$iv_ruleXOseeEnumEntry.current; } 
	 EOF 
;

// Rule XOseeEnumEntry
ruleXOseeEnumEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'entry' 
    {
        createLeafNode(grammarAccess.getXOseeEnumEntryAccess().getEntryKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXOseeEnumEntryAccess().getNameNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleNAME_REFERENCE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"NAME_REFERENCE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_ordinal_2_0=RULE_WHOLE_NUM_STR
		{
			createLeafNode(grammarAccess.getXOseeEnumEntryAccess().getOrdinalWHOLE_NUM_STRTerminalRuleCall_2_0(), "ordinal"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ordinal",
	        		lv_ordinal_2_0, 
	        		"WHOLE_NUM_STR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	'entryGuid' 
    {
        createLeafNode(grammarAccess.getXOseeEnumEntryAccess().getEntryGuidKeyword_3_0(), null); 
    }
(
(
		lv_entryGuid_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXOseeEnumEntryAccess().getEntryGuidSTRINGTerminalRuleCall_3_1_0(), "entryGuid"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"entryGuid",
	        		lv_entryGuid_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleXOseeEnumOverride
entryRuleXOseeEnumOverride returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXOseeEnumOverrideRule(), currentNode); }
	 iv_ruleXOseeEnumOverride=ruleXOseeEnumOverride 
	 { $current=$iv_ruleXOseeEnumOverride.current; } 
	 EOF 
;

// Rule XOseeEnumOverride
ruleXOseeEnumOverride returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'overrides enum' 
    {
        createLeafNode(grammarAccess.getXOseeEnumOverrideAccess().getOverridesEnumKeyword_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumOverrideRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXOseeEnumOverrideAccess().getOverridenEnumTypeXOseeEnumTypeCrossReference_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getXOseeEnumOverrideAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		lv_inheritAll_3_0=	'inheritAll' 
    {
        createLeafNode(grammarAccess.getXOseeEnumOverrideAccess().getInheritAllInheritAllKeyword_3_0(), "inheritAll"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumOverrideRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "inheritAll", true, "inheritAll", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXOseeEnumOverrideAccess().getOverrideOptionsOverrideOptionParserRuleCall_4_0(), currentNode); 
	    }
		lv_overrideOptions_4_0=ruleOverrideOption		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXOseeEnumOverrideRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"overrideOptions",
	        		lv_overrideOptions_4_0, 
	        		"OverrideOption", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getXOseeEnumOverrideAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleOverrideOption
entryRuleOverrideOption returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOverrideOptionRule(), currentNode); }
	 iv_ruleOverrideOption=ruleOverrideOption 
	 { $current=$iv_ruleOverrideOption.current; } 
	 EOF 
;

// Rule OverrideOption
ruleOverrideOption returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOverrideOptionAccess().getAddEnumParserRuleCall_0(), currentNode); 
    }
    this_AddEnum_0=ruleAddEnum
    { 
        $current = $this_AddEnum_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOverrideOptionAccess().getRemoveEnumParserRuleCall_1(), currentNode); 
    }
    this_RemoveEnum_1=ruleRemoveEnum
    { 
        $current = $this_RemoveEnum_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAddEnum
entryRuleAddEnum returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAddEnumRule(), currentNode); }
	 iv_ruleAddEnum=ruleAddEnum 
	 { $current=$iv_ruleAddEnum.current; } 
	 EOF 
;

// Rule AddEnum
ruleAddEnum returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'add' 
    {
        createLeafNode(grammarAccess.getAddEnumAccess().getAddKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAddEnumAccess().getEnumEntryNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
		lv_enumEntry_1_0=ruleNAME_REFERENCE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"enumEntry",
	        		lv_enumEntry_1_0, 
	        		"NAME_REFERENCE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_ordinal_2_0=RULE_WHOLE_NUM_STR
		{
			createLeafNode(grammarAccess.getAddEnumAccess().getOrdinalWHOLE_NUM_STRTerminalRuleCall_2_0(), "ordinal"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ordinal",
	        		lv_ordinal_2_0, 
	        		"WHOLE_NUM_STR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	'entryGuid' 
    {
        createLeafNode(grammarAccess.getAddEnumAccess().getEntryGuidKeyword_3_0(), null); 
    }
(
(
		lv_entryGuid_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getAddEnumAccess().getEntryGuidSTRINGTerminalRuleCall_3_1_0(), "entryGuid"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"entryGuid",
	        		lv_entryGuid_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleRemoveEnum
entryRuleRemoveEnum returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRemoveEnumRule(), currentNode); }
	 iv_ruleRemoveEnum=ruleRemoveEnum 
	 { $current=$iv_ruleRemoveEnum.current; } 
	 EOF 
;

// Rule RemoveEnum
ruleRemoveEnum returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'remove' 
    {
        createLeafNode(grammarAccess.getRemoveEnumAccess().getRemoveKeyword_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRemoveEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRemoveEnumAccess().getEnumEntryXOseeEnumEntryCrossReference_1_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleXRelationType
entryRuleXRelationType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXRelationTypeRule(), currentNode); }
	 iv_ruleXRelationType=ruleXRelationType 
	 { $current=$iv_ruleXRelationType.current; } 
	 EOF 
;

// Rule XRelationType
ruleXRelationType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'relationType' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getRelationTypeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXRelationTypeAccess().getNameNAME_REFERENCEParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleNAME_REFERENCE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"NAME_REFERENCE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
	'guid' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getGuidKeyword_3(), null); 
    }
(
(
		lv_typeGuid_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXRelationTypeAccess().getTypeGuidSTRINGTerminalRuleCall_4_0(), "typeGuid"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeGuid",
	        		lv_typeGuid_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'sideAName' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getSideANameKeyword_5(), null); 
    }
(
(
		lv_sideAName_6_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXRelationTypeAccess().getSideANameSTRINGTerminalRuleCall_6_0(), "sideAName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sideAName",
	        		lv_sideAName_6_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'sideAArtifactType' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getSideAArtifactTypeKeyword_7(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getXRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXRelationTypeAccess().getSideAArtifactTypeXArtifactTypeCrossReference_8_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'sideBName' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getSideBNameKeyword_9(), null); 
    }
(
(
		lv_sideBName_10_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXRelationTypeAccess().getSideBNameSTRINGTerminalRuleCall_10_0(), "sideBName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sideBName",
	        		lv_sideBName_10_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'sideBArtifactType' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getSideBArtifactTypeKeyword_11(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getXRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXRelationTypeAccess().getSideBArtifactTypeXArtifactTypeCrossReference_12_0(), currentNode); 
	    }
		ruleNAME_REFERENCE		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'defaultOrderType' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getDefaultOrderTypeKeyword_13(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXRelationTypeAccess().getDefaultOrderTypeRelationOrderTypeParserRuleCall_14_0(), currentNode); 
	    }
		lv_defaultOrderType_14_0=ruleRelationOrderType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultOrderType",
	        		lv_defaultOrderType_14_0, 
	        		"RelationOrderType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'multiplicity' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getMultiplicityKeyword_15(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXRelationTypeAccess().getMultiplicityRelationMultiplicityEnumEnumRuleCall_16_0(), currentNode); 
	    }
		lv_multiplicity_16_0=ruleRelationMultiplicityEnum		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXRelationTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"multiplicity",
	        		lv_multiplicity_16_0, 
	        		"RelationMultiplicityEnum", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getXRelationTypeAccess().getRightCurlyBracketKeyword_17(), null); 
    }
)
;





// Entry rule entryRuleRelationOrderType
entryRuleRelationOrderType returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationOrderTypeRule(), currentNode); } 
	 iv_ruleRelationOrderType=ruleRelationOrderType 
	 { $current=$iv_ruleRelationOrderType.current.getText(); }  
	 EOF 
;

// Rule RelationOrderType
ruleRelationOrderType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Lexicographical_Ascending' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationOrderTypeAccess().getLexicographical_AscendingKeyword_0(), null); 
    }

    |
	kw='Lexicographical_Descending' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationOrderTypeAccess().getLexicographical_DescendingKeyword_1(), null); 
    }

    |
	kw='Unordered' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelationOrderTypeAccess().getUnorderedKeyword_2(), null); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getRelationOrderTypeAccess().getIDTerminalRuleCall_3(), null); 
    }
)
    ;





// Rule RelationMultiplicityEnum
ruleRelationMultiplicityEnum returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'ONE_TO_ONE' 
	{
        $current = grammarAccess.getRelationMultiplicityEnumAccess().getONE_TO_ONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationMultiplicityEnumAccess().getONE_TO_ONEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'ONE_TO_MANY' 
	{
        $current = grammarAccess.getRelationMultiplicityEnumAccess().getONE_TO_MANYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationMultiplicityEnumAccess().getONE_TO_MANYEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'MANY_TO_ONE' 
	{
        $current = grammarAccess.getRelationMultiplicityEnumAccess().getMANY_TO_ONEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationMultiplicityEnumAccess().getMANY_TO_ONEEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'MANY_TO_MANY' 
	{
        $current = grammarAccess.getRelationMultiplicityEnumAccess().getMANY_TO_MANYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationMultiplicityEnumAccess().getMANY_TO_MANYEnumLiteralDeclaration_3(), null); 
    }
));



RULE_WHOLE_NUM_STR : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


